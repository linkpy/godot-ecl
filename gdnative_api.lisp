
((:CORE (:TYPE . "CORE") (:VERSION (:MAJOR . 1) (:MINOR . 0))
  (:NEXT (:TYPE . "CORE") (:VERSION (:MAJOR . 1) (:MINOR . 1))
   (:NEXT (:TYPE . "CORE") (:VERSION (:MAJOR . 1) (:MINOR . 2)) (:NEXT)
    (:API
     ((:NAME . "godot_dictionary_duplicate")
      (:RETURN--TYPE . "godot_dictionary")
      (:ARGUMENTS ("const godot_dictionary *" "p_self")
       ("const godot_bool" "p_deep")))
     ((:NAME . "godot_vector3_move_toward") (:RETURN--TYPE . "godot_vector3")
      (:ARGUMENTS ("const godot_vector3 *" "p_self")
       ("const godot_vector3 *" "p_to") ("const godot_real" "p_delta")))
     ((:NAME . "godot_vector2_move_toward") (:RETURN--TYPE . "godot_vector2")
      (:ARGUMENTS ("const godot_vector2 *" "p_self")
       ("const godot_vector2 *" "p_to") ("const godot_real" "p_delta")))
     ((:NAME . "godot_string_count") (:RETURN--TYPE . "godot_int")
      (:ARGUMENTS ("const godot_string *" "p_self") ("godot_string" "p_what")
       ("godot_int" "p_from") ("godot_int" "p_to")))
     ((:NAME . "godot_string_countn") (:RETURN--TYPE . "godot_int")
      (:ARGUMENTS ("const godot_string *" "p_self") ("godot_string" "p_what")
       ("godot_int" "p_from") ("godot_int" "p_to")))
     ((:NAME . "godot_vector3_direction_to") (:RETURN--TYPE . "godot_vector3")
      (:ARGUMENTS ("const godot_vector3 *" "p_self")
       ("const godot_vector3 *" "p_to")))
     ((:NAME . "godot_vector2_direction_to") (:RETURN--TYPE . "godot_vector2")
      (:ARGUMENTS ("const godot_vector2 *" "p_self")
       ("const godot_vector2 *" "p_to")))
     ((:NAME . "godot_array_slice") (:RETURN--TYPE . "godot_array")
      (:ARGUMENTS ("const godot_array *" "p_self")
       ("const godot_int" "p_begin") ("const godot_int" "p_end")
       ("const godot_int" "p_step") ("const godot_bool" "p_deep")))
     ((:NAME . "godot_pool_byte_array_empty") (:RETURN--TYPE . "godot_bool")
      (:ARGUMENTS ("const godot_pool_byte_array *" "p_self")))
     ((:NAME . "godot_pool_int_array_empty") (:RETURN--TYPE . "godot_bool")
      (:ARGUMENTS ("const godot_pool_int_array *" "p_self")))
     ((:NAME . "godot_pool_real_array_empty") (:RETURN--TYPE . "godot_bool")
      (:ARGUMENTS ("const godot_pool_real_array *" "p_self")))
     ((:NAME . "godot_pool_string_array_empty") (:RETURN--TYPE . "godot_bool")
      (:ARGUMENTS ("const godot_pool_string_array *" "p_self")))
     ((:NAME . "godot_pool_vector2_array_empty") (:RETURN--TYPE . "godot_bool")
      (:ARGUMENTS ("const godot_pool_vector2_array *" "p_self")))
     ((:NAME . "godot_pool_vector3_array_empty") (:RETURN--TYPE . "godot_bool")
      (:ARGUMENTS ("const godot_pool_vector3_array *" "p_self")))
     ((:NAME . "godot_pool_color_array_empty") (:RETURN--TYPE . "godot_bool")
      (:ARGUMENTS ("const godot_pool_color_array *" "p_self")))
     ((:NAME . "godot_get_class_tag") (:RETURN--TYPE . "void *")
      (:ARGUMENTS ("const godot_string_name *" "p_class")))
     ((:NAME . "godot_object_cast_to") (:RETURN--TYPE . "godot_object *")
      (:ARGUMENTS ("const godot_object *" "p_object")
       ("void *" "p_class_tag")))
     ((:NAME . "godot_instance_from_id") (:RETURN--TYPE . "godot_object *")
      (:ARGUMENTS ("godot_int" "p_instance_id")))))
   (:API
    ((:NAME . "godot_color_to_abgr32") (:RETURN--TYPE . "godot_int")
     (:ARGUMENTS ("const godot_color *" "p_self")))
    ((:NAME . "godot_color_to_abgr64") (:RETURN--TYPE . "godot_int")
     (:ARGUMENTS ("const godot_color *" "p_self")))
    ((:NAME . "godot_color_to_argb64") (:RETURN--TYPE . "godot_int")
     (:ARGUMENTS ("const godot_color *" "p_self")))
    ((:NAME . "godot_color_to_rgba64") (:RETURN--TYPE . "godot_int")
     (:ARGUMENTS ("const godot_color *" "p_self")))
    ((:NAME . "godot_color_darkened") (:RETURN--TYPE . "godot_color")
     (:ARGUMENTS ("const godot_color *" "p_self")
      ("const godot_real" "p_amount")))
    ((:NAME . "godot_color_from_hsv") (:RETURN--TYPE . "godot_color")
     (:ARGUMENTS ("const godot_color *" "p_self") ("const godot_real" "p_h")
      ("const godot_real" "p_s") ("const godot_real" "p_v")
      ("const godot_real" "p_a")))
    ((:NAME . "godot_color_lightened") (:RETURN--TYPE . "godot_color")
     (:ARGUMENTS ("const godot_color *" "p_self")
      ("const godot_real" "p_amount")))
    ((:NAME . "godot_array_duplicate") (:RETURN--TYPE . "godot_array")
     (:ARGUMENTS ("const godot_array *" "p_self")
      ("const godot_bool" "p_deep")))
    ((:NAME . "godot_array_max") (:RETURN--TYPE . "godot_variant")
     (:ARGUMENTS ("const godot_array *" "p_self")))
    ((:NAME . "godot_array_min") (:RETURN--TYPE . "godot_variant")
     (:ARGUMENTS ("const godot_array *" "p_self")))
    ((:NAME . "godot_array_shuffle") (:RETURN--TYPE . "void")
     (:ARGUMENTS ("godot_array *" "p_self")))
    ((:NAME . "godot_basis_slerp") (:RETURN--TYPE . "godot_basis")
     (:ARGUMENTS ("const godot_basis *" "p_self") ("const godot_basis *" "p_b")
      ("const godot_real" "p_t")))
    ((:NAME . "godot_dictionary_get_with_default")
     (:RETURN--TYPE . "godot_variant")
     (:ARGUMENTS ("const godot_dictionary *" "p_self")
      ("const godot_variant *" "p_key") ("const godot_variant *" "p_default")))
    ((:NAME . "godot_dictionary_erase_with_return") (:RETURN--TYPE . "bool")
     (:ARGUMENTS ("godot_dictionary *" "p_self")
      ("const godot_variant *" "p_key")))
    ((:NAME . "godot_node_path_get_as_property_path")
     (:RETURN--TYPE . "godot_node_path")
     (:ARGUMENTS ("const godot_node_path *" "p_self")))
    ((:NAME . "godot_quat_set_axis_angle") (:RETURN--TYPE . "void")
     (:ARGUMENTS ("godot_quat *" "p_self") ("const godot_vector3 *" "p_axis")
      ("const godot_real" "p_angle")))
    ((:NAME . "godot_rect2_grow_individual") (:RETURN--TYPE . "godot_rect2")
     (:ARGUMENTS ("const godot_rect2 *" "p_self") ("const godot_real" "p_left")
      ("const godot_real" "p_top") ("const godot_real" "p_right")
      ("const godot_real" "p_bottom")))
    ((:NAME . "godot_rect2_grow_margin") (:RETURN--TYPE . "godot_rect2")
     (:ARGUMENTS ("const godot_rect2 *" "p_self")
      ("const godot_int" "p_margin") ("const godot_real" "p_by")))
    ((:NAME . "godot_rect2_abs") (:RETURN--TYPE . "godot_rect2")
     (:ARGUMENTS ("const godot_rect2 *" "p_self")))
    ((:NAME . "godot_string_dedent") (:RETURN--TYPE . "godot_string")
     (:ARGUMENTS ("const godot_string *" "p_self")))
    ((:NAME . "godot_string_trim_prefix") (:RETURN--TYPE . "godot_string")
     (:ARGUMENTS ("const godot_string *" "p_self")
      ("const godot_string *" "p_prefix")))
    ((:NAME . "godot_string_trim_suffix") (:RETURN--TYPE . "godot_string")
     (:ARGUMENTS ("const godot_string *" "p_self")
      ("const godot_string *" "p_suffix")))
    ((:NAME . "godot_string_rstrip") (:RETURN--TYPE . "godot_string")
     (:ARGUMENTS ("const godot_string *" "p_self")
      ("const godot_string *" "p_chars")))
    ((:NAME . "godot_string_rsplit")
     (:RETURN--TYPE . "godot_pool_string_array")
     (:ARGUMENTS ("const godot_string *" "p_self")
      ("const godot_string *" "p_divisor") ("const godot_bool" "p_allow_empty")
      ("const godot_int" "p_maxsplit")))
    ((:NAME . "godot_basis_get_quat") (:RETURN--TYPE . "godot_quat")
     (:ARGUMENTS ("const godot_basis *" "p_self")))
    ((:NAME . "godot_basis_set_quat") (:RETURN--TYPE . "void")
     (:ARGUMENTS ("godot_basis *" "p_self") ("const godot_quat *" "p_quat")))
    ((:NAME . "godot_basis_set_axis_angle_scale") (:RETURN--TYPE . "void")
     (:ARGUMENTS ("godot_basis *" "p_self") ("const godot_vector3 *" "p_axis")
      ("godot_real" "p_phi") ("const godot_vector3 *" "p_scale")))
    ((:NAME . "godot_basis_set_euler_scale") (:RETURN--TYPE . "void")
     (:ARGUMENTS ("godot_basis *" "p_self") ("const godot_vector3 *" "p_euler")
      ("const godot_vector3 *" "p_scale")))
    ((:NAME . "godot_basis_set_quat_scale") (:RETURN--TYPE . "void")
     (:ARGUMENTS ("godot_basis *" "p_self") ("const godot_quat *" "p_quat")
      ("const godot_vector3 *" "p_scale")))
    ((:NAME . "godot_is_instance_valid") (:RETURN--TYPE . "bool")
     (:ARGUMENTS ("const godot_object *" "p_object")))
    ((:NAME . "godot_quat_new_with_basis") (:RETURN--TYPE . "void")
     (:ARGUMENTS ("godot_quat *" "r_dest") ("const godot_basis *" "p_basis")))
    ((:NAME . "godot_quat_new_with_euler") (:RETURN--TYPE . "void")
     (:ARGUMENTS ("godot_quat *" "r_dest")
      ("const godot_vector3 *" "p_euler")))
    ((:NAME . "godot_transform_new_with_quat") (:RETURN--TYPE . "void")
     (:ARGUMENTS ("godot_transform *" "r_dest")
      ("const godot_quat *" "p_quat")))
    ((:NAME . "godot_variant_get_operator_name")
     (:RETURN--TYPE . "godot_string")
     (:ARGUMENTS ("godot_variant_operator" "p_op")))
    ((:NAME . "godot_variant_evaluate") (:RETURN--TYPE . "void")
     (:ARGUMENTS ("godot_variant_operator" "p_op")
      ("const godot_variant *" "p_a") ("const godot_variant *" "p_b")
      ("godot_variant *" "r_ret") ("godot_bool *" "r_valid")))))
  (:API
   ((:NAME . "godot_color_new_rgba") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_color *" "r_dest") ("const godot_real" "p_r")
     ("const godot_real" "p_g") ("const godot_real" "p_b")
     ("const godot_real" "p_a")))
   ((:NAME . "godot_color_new_rgb") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_color *" "r_dest") ("const godot_real" "p_r")
     ("const godot_real" "p_g") ("const godot_real" "p_b")))
   ((:NAME . "godot_color_get_r") (:RETURN--TYPE . "godot_real")
    (:ARGUMENTS ("const godot_color *" "p_self")))
   ((:NAME . "godot_color_set_r") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_color *" "p_self") ("const godot_real" "r")))
   ((:NAME . "godot_color_get_g") (:RETURN--TYPE . "godot_real")
    (:ARGUMENTS ("const godot_color *" "p_self")))
   ((:NAME . "godot_color_set_g") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_color *" "p_self") ("const godot_real" "g")))
   ((:NAME . "godot_color_get_b") (:RETURN--TYPE . "godot_real")
    (:ARGUMENTS ("const godot_color *" "p_self")))
   ((:NAME . "godot_color_set_b") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_color *" "p_self") ("const godot_real" "b")))
   ((:NAME . "godot_color_get_a") (:RETURN--TYPE . "godot_real")
    (:ARGUMENTS ("const godot_color *" "p_self")))
   ((:NAME . "godot_color_set_a") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_color *" "p_self") ("const godot_real" "a")))
   ((:NAME . "godot_color_get_h") (:RETURN--TYPE . "godot_real")
    (:ARGUMENTS ("const godot_color *" "p_self")))
   ((:NAME . "godot_color_get_s") (:RETURN--TYPE . "godot_real")
    (:ARGUMENTS ("const godot_color *" "p_self")))
   ((:NAME . "godot_color_get_v") (:RETURN--TYPE . "godot_real")
    (:ARGUMENTS ("const godot_color *" "p_self")))
   ((:NAME . "godot_color_as_string") (:RETURN--TYPE . "godot_string")
    (:ARGUMENTS ("const godot_color *" "p_self")))
   ((:NAME . "godot_color_to_rgba32") (:RETURN--TYPE . "godot_int")
    (:ARGUMENTS ("const godot_color *" "p_self")))
   ((:NAME . "godot_color_to_argb32") (:RETURN--TYPE . "godot_int")
    (:ARGUMENTS ("const godot_color *" "p_self")))
   ((:NAME . "godot_color_gray") (:RETURN--TYPE . "godot_real")
    (:ARGUMENTS ("const godot_color *" "p_self")))
   ((:NAME . "godot_color_inverted") (:RETURN--TYPE . "godot_color")
    (:ARGUMENTS ("const godot_color *" "p_self")))
   ((:NAME . "godot_color_contrasted") (:RETURN--TYPE . "godot_color")
    (:ARGUMENTS ("const godot_color *" "p_self")))
   ((:NAME . "godot_color_linear_interpolate") (:RETURN--TYPE . "godot_color")
    (:ARGUMENTS ("const godot_color *" "p_self") ("const godot_color *" "p_b")
     ("const godot_real" "p_t")))
   ((:NAME . "godot_color_blend") (:RETURN--TYPE . "godot_color")
    (:ARGUMENTS ("const godot_color *" "p_self")
     ("const godot_color *" "p_over")))
   ((:NAME . "godot_color_to_html") (:RETURN--TYPE . "godot_string")
    (:ARGUMENTS ("const godot_color *" "p_self")
     ("const godot_bool" "p_with_alpha")))
   ((:NAME . "godot_color_operator_equal") (:RETURN--TYPE . "godot_bool")
    (:ARGUMENTS ("const godot_color *" "p_self")
     ("const godot_color *" "p_b")))
   ((:NAME . "godot_color_operator_less") (:RETURN--TYPE . "godot_bool")
    (:ARGUMENTS ("const godot_color *" "p_self")
     ("const godot_color *" "p_b")))
   ((:NAME . "godot_vector2_new") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_vector2 *" "r_dest") ("const godot_real" "p_x")
     ("const godot_real" "p_y")))
   ((:NAME . "godot_vector2_as_string") (:RETURN--TYPE . "godot_string")
    (:ARGUMENTS ("const godot_vector2 *" "p_self")))
   ((:NAME . "godot_vector2_normalized") (:RETURN--TYPE . "godot_vector2")
    (:ARGUMENTS ("const godot_vector2 *" "p_self")))
   ((:NAME . "godot_vector2_length") (:RETURN--TYPE . "godot_real")
    (:ARGUMENTS ("const godot_vector2 *" "p_self")))
   ((:NAME . "godot_vector2_angle") (:RETURN--TYPE . "godot_real")
    (:ARGUMENTS ("const godot_vector2 *" "p_self")))
   ((:NAME . "godot_vector2_length_squared") (:RETURN--TYPE . "godot_real")
    (:ARGUMENTS ("const godot_vector2 *" "p_self")))
   ((:NAME . "godot_vector2_is_normalized") (:RETURN--TYPE . "godot_bool")
    (:ARGUMENTS ("const godot_vector2 *" "p_self")))
   ((:NAME . "godot_vector2_distance_to") (:RETURN--TYPE . "godot_real")
    (:ARGUMENTS ("const godot_vector2 *" "p_self")
     ("const godot_vector2 *" "p_to")))
   ((:NAME . "godot_vector2_distance_squared_to")
    (:RETURN--TYPE . "godot_real")
    (:ARGUMENTS ("const godot_vector2 *" "p_self")
     ("const godot_vector2 *" "p_to")))
   ((:NAME . "godot_vector2_angle_to") (:RETURN--TYPE . "godot_real")
    (:ARGUMENTS ("const godot_vector2 *" "p_self")
     ("const godot_vector2 *" "p_to")))
   ((:NAME . "godot_vector2_angle_to_point") (:RETURN--TYPE . "godot_real")
    (:ARGUMENTS ("const godot_vector2 *" "p_self")
     ("const godot_vector2 *" "p_to")))
   ((:NAME . "godot_vector2_linear_interpolate")
    (:RETURN--TYPE . "godot_vector2")
    (:ARGUMENTS ("const godot_vector2 *" "p_self")
     ("const godot_vector2 *" "p_b") ("const godot_real" "p_t")))
   ((:NAME . "godot_vector2_cubic_interpolate")
    (:RETURN--TYPE . "godot_vector2")
    (:ARGUMENTS ("const godot_vector2 *" "p_self")
     ("const godot_vector2 *" "p_b") ("const godot_vector2 *" "p_pre_a")
     ("const godot_vector2 *" "p_post_b") ("const godot_real" "p_t")))
   ((:NAME . "godot_vector2_rotated") (:RETURN--TYPE . "godot_vector2")
    (:ARGUMENTS ("const godot_vector2 *" "p_self")
     ("const godot_real" "p_phi")))
   ((:NAME . "godot_vector2_tangent") (:RETURN--TYPE . "godot_vector2")
    (:ARGUMENTS ("const godot_vector2 *" "p_self")))
   ((:NAME . "godot_vector2_floor") (:RETURN--TYPE . "godot_vector2")
    (:ARGUMENTS ("const godot_vector2 *" "p_self")))
   ((:NAME . "godot_vector2_snapped") (:RETURN--TYPE . "godot_vector2")
    (:ARGUMENTS ("const godot_vector2 *" "p_self")
     ("const godot_vector2 *" "p_by")))
   ((:NAME . "godot_vector2_aspect") (:RETURN--TYPE . "godot_real")
    (:ARGUMENTS ("const godot_vector2 *" "p_self")))
   ((:NAME . "godot_vector2_dot") (:RETURN--TYPE . "godot_real")
    (:ARGUMENTS ("const godot_vector2 *" "p_self")
     ("const godot_vector2 *" "p_with")))
   ((:NAME . "godot_vector2_slide") (:RETURN--TYPE . "godot_vector2")
    (:ARGUMENTS ("const godot_vector2 *" "p_self")
     ("const godot_vector2 *" "p_n")))
   ((:NAME . "godot_vector2_bounce") (:RETURN--TYPE . "godot_vector2")
    (:ARGUMENTS ("const godot_vector2 *" "p_self")
     ("const godot_vector2 *" "p_n")))
   ((:NAME . "godot_vector2_reflect") (:RETURN--TYPE . "godot_vector2")
    (:ARGUMENTS ("const godot_vector2 *" "p_self")
     ("const godot_vector2 *" "p_n")))
   ((:NAME . "godot_vector2_abs") (:RETURN--TYPE . "godot_vector2")
    (:ARGUMENTS ("const godot_vector2 *" "p_self")))
   ((:NAME . "godot_vector2_clamped") (:RETURN--TYPE . "godot_vector2")
    (:ARGUMENTS ("const godot_vector2 *" "p_self")
     ("const godot_real" "p_length")))
   ((:NAME . "godot_vector2_operator_add") (:RETURN--TYPE . "godot_vector2")
    (:ARGUMENTS ("const godot_vector2 *" "p_self")
     ("const godot_vector2 *" "p_b")))
   ((:NAME . "godot_vector2_operator_subtract")
    (:RETURN--TYPE . "godot_vector2")
    (:ARGUMENTS ("const godot_vector2 *" "p_self")
     ("const godot_vector2 *" "p_b")))
   ((:NAME . "godot_vector2_operator_multiply_vector")
    (:RETURN--TYPE . "godot_vector2")
    (:ARGUMENTS ("const godot_vector2 *" "p_self")
     ("const godot_vector2 *" "p_b")))
   ((:NAME . "godot_vector2_operator_multiply_scalar")
    (:RETURN--TYPE . "godot_vector2")
    (:ARGUMENTS ("const godot_vector2 *" "p_self") ("const godot_real" "p_b")))
   ((:NAME . "godot_vector2_operator_divide_vector")
    (:RETURN--TYPE . "godot_vector2")
    (:ARGUMENTS ("const godot_vector2 *" "p_self")
     ("const godot_vector2 *" "p_b")))
   ((:NAME . "godot_vector2_operator_divide_scalar")
    (:RETURN--TYPE . "godot_vector2")
    (:ARGUMENTS ("const godot_vector2 *" "p_self") ("const godot_real" "p_b")))
   ((:NAME . "godot_vector2_operator_equal") (:RETURN--TYPE . "godot_bool")
    (:ARGUMENTS ("const godot_vector2 *" "p_self")
     ("const godot_vector2 *" "p_b")))
   ((:NAME . "godot_vector2_operator_less") (:RETURN--TYPE . "godot_bool")
    (:ARGUMENTS ("const godot_vector2 *" "p_self")
     ("const godot_vector2 *" "p_b")))
   ((:NAME . "godot_vector2_operator_neg") (:RETURN--TYPE . "godot_vector2")
    (:ARGUMENTS ("const godot_vector2 *" "p_self")))
   ((:NAME . "godot_vector2_set_x") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_vector2 *" "p_self") ("const godot_real" "p_x")))
   ((:NAME . "godot_vector2_set_y") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_vector2 *" "p_self") ("const godot_real" "p_y")))
   ((:NAME . "godot_vector2_get_x") (:RETURN--TYPE . "godot_real")
    (:ARGUMENTS ("const godot_vector2 *" "p_self")))
   ((:NAME . "godot_vector2_get_y") (:RETURN--TYPE . "godot_real")
    (:ARGUMENTS ("const godot_vector2 *" "p_self")))
   ((:NAME . "godot_quat_new") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_quat *" "r_dest") ("const godot_real" "p_x")
     ("const godot_real" "p_y") ("const godot_real" "p_z")
     ("const godot_real" "p_w")))
   ((:NAME . "godot_quat_new_with_axis_angle") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_quat *" "r_dest") ("const godot_vector3 *" "p_axis")
     ("const godot_real" "p_angle")))
   ((:NAME . "godot_quat_get_x") (:RETURN--TYPE . "godot_real")
    (:ARGUMENTS ("const godot_quat *" "p_self")))
   ((:NAME . "godot_quat_set_x") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_quat *" "p_self") ("const godot_real" "val")))
   ((:NAME . "godot_quat_get_y") (:RETURN--TYPE . "godot_real")
    (:ARGUMENTS ("const godot_quat *" "p_self")))
   ((:NAME . "godot_quat_set_y") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_quat *" "p_self") ("const godot_real" "val")))
   ((:NAME . "godot_quat_get_z") (:RETURN--TYPE . "godot_real")
    (:ARGUMENTS ("const godot_quat *" "p_self")))
   ((:NAME . "godot_quat_set_z") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_quat *" "p_self") ("const godot_real" "val")))
   ((:NAME . "godot_quat_get_w") (:RETURN--TYPE . "godot_real")
    (:ARGUMENTS ("const godot_quat *" "p_self")))
   ((:NAME . "godot_quat_set_w") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_quat *" "p_self") ("const godot_real" "val")))
   ((:NAME . "godot_quat_as_string") (:RETURN--TYPE . "godot_string")
    (:ARGUMENTS ("const godot_quat *" "p_self")))
   ((:NAME . "godot_quat_length") (:RETURN--TYPE . "godot_real")
    (:ARGUMENTS ("const godot_quat *" "p_self")))
   ((:NAME . "godot_quat_length_squared") (:RETURN--TYPE . "godot_real")
    (:ARGUMENTS ("const godot_quat *" "p_self")))
   ((:NAME . "godot_quat_normalized") (:RETURN--TYPE . "godot_quat")
    (:ARGUMENTS ("const godot_quat *" "p_self")))
   ((:NAME . "godot_quat_is_normalized") (:RETURN--TYPE . "godot_bool")
    (:ARGUMENTS ("const godot_quat *" "p_self")))
   ((:NAME . "godot_quat_inverse") (:RETURN--TYPE . "godot_quat")
    (:ARGUMENTS ("const godot_quat *" "p_self")))
   ((:NAME . "godot_quat_dot") (:RETURN--TYPE . "godot_real")
    (:ARGUMENTS ("const godot_quat *" "p_self") ("const godot_quat *" "p_b")))
   ((:NAME . "godot_quat_xform") (:RETURN--TYPE . "godot_vector3")
    (:ARGUMENTS ("const godot_quat *" "p_self")
     ("const godot_vector3 *" "p_v")))
   ((:NAME . "godot_quat_slerp") (:RETURN--TYPE . "godot_quat")
    (:ARGUMENTS ("const godot_quat *" "p_self") ("const godot_quat *" "p_b")
     ("const godot_real" "p_t")))
   ((:NAME . "godot_quat_slerpni") (:RETURN--TYPE . "godot_quat")
    (:ARGUMENTS ("const godot_quat *" "p_self") ("const godot_quat *" "p_b")
     ("const godot_real" "p_t")))
   ((:NAME . "godot_quat_cubic_slerp") (:RETURN--TYPE . "godot_quat")
    (:ARGUMENTS ("const godot_quat *" "p_self") ("const godot_quat *" "p_b")
     ("const godot_quat *" "p_pre_a") ("const godot_quat *" "p_post_b")
     ("const godot_real" "p_t")))
   ((:NAME . "godot_quat_operator_multiply") (:RETURN--TYPE . "godot_quat")
    (:ARGUMENTS ("const godot_quat *" "p_self") ("const godot_real" "p_b")))
   ((:NAME . "godot_quat_operator_add") (:RETURN--TYPE . "godot_quat")
    (:ARGUMENTS ("const godot_quat *" "p_self") ("const godot_quat *" "p_b")))
   ((:NAME . "godot_quat_operator_subtract") (:RETURN--TYPE . "godot_quat")
    (:ARGUMENTS ("const godot_quat *" "p_self") ("const godot_quat *" "p_b")))
   ((:NAME . "godot_quat_operator_divide") (:RETURN--TYPE . "godot_quat")
    (:ARGUMENTS ("const godot_quat *" "p_self") ("const godot_real" "p_b")))
   ((:NAME . "godot_quat_operator_equal") (:RETURN--TYPE . "godot_bool")
    (:ARGUMENTS ("const godot_quat *" "p_self") ("const godot_quat *" "p_b")))
   ((:NAME . "godot_quat_operator_neg") (:RETURN--TYPE . "godot_quat")
    (:ARGUMENTS ("const godot_quat *" "p_self")))
   ((:NAME . "godot_basis_new_with_rows") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_basis *" "r_dest") ("const godot_vector3 *" "p_x_axis")
     ("const godot_vector3 *" "p_y_axis")
     ("const godot_vector3 *" "p_z_axis")))
   ((:NAME . "godot_basis_new_with_axis_and_angle") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_basis *" "r_dest") ("const godot_vector3 *" "p_axis")
     ("const godot_real" "p_phi")))
   ((:NAME . "godot_basis_new_with_euler") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_basis *" "r_dest")
     ("const godot_vector3 *" "p_euler")))
   ((:NAME . "godot_basis_as_string") (:RETURN--TYPE . "godot_string")
    (:ARGUMENTS ("const godot_basis *" "p_self")))
   ((:NAME . "godot_basis_inverse") (:RETURN--TYPE . "godot_basis")
    (:ARGUMENTS ("const godot_basis *" "p_self")))
   ((:NAME . "godot_basis_transposed") (:RETURN--TYPE . "godot_basis")
    (:ARGUMENTS ("const godot_basis *" "p_self")))
   ((:NAME . "godot_basis_orthonormalized") (:RETURN--TYPE . "godot_basis")
    (:ARGUMENTS ("const godot_basis *" "p_self")))
   ((:NAME . "godot_basis_determinant") (:RETURN--TYPE . "godot_real")
    (:ARGUMENTS ("const godot_basis *" "p_self")))
   ((:NAME . "godot_basis_rotated") (:RETURN--TYPE . "godot_basis")
    (:ARGUMENTS ("const godot_basis *" "p_self")
     ("const godot_vector3 *" "p_axis") ("const godot_real" "p_phi")))
   ((:NAME . "godot_basis_scaled") (:RETURN--TYPE . "godot_basis")
    (:ARGUMENTS ("const godot_basis *" "p_self")
     ("const godot_vector3 *" "p_scale")))
   ((:NAME . "godot_basis_get_scale") (:RETURN--TYPE . "godot_vector3")
    (:ARGUMENTS ("const godot_basis *" "p_self")))
   ((:NAME . "godot_basis_get_euler") (:RETURN--TYPE . "godot_vector3")
    (:ARGUMENTS ("const godot_basis *" "p_self")))
   ((:NAME . "godot_basis_tdotx") (:RETURN--TYPE . "godot_real")
    (:ARGUMENTS ("const godot_basis *" "p_self")
     ("const godot_vector3 *" "p_with")))
   ((:NAME . "godot_basis_tdoty") (:RETURN--TYPE . "godot_real")
    (:ARGUMENTS ("const godot_basis *" "p_self")
     ("const godot_vector3 *" "p_with")))
   ((:NAME . "godot_basis_tdotz") (:RETURN--TYPE . "godot_real")
    (:ARGUMENTS ("const godot_basis *" "p_self")
     ("const godot_vector3 *" "p_with")))
   ((:NAME . "godot_basis_xform") (:RETURN--TYPE . "godot_vector3")
    (:ARGUMENTS ("const godot_basis *" "p_self")
     ("const godot_vector3 *" "p_v")))
   ((:NAME . "godot_basis_xform_inv") (:RETURN--TYPE . "godot_vector3")
    (:ARGUMENTS ("const godot_basis *" "p_self")
     ("const godot_vector3 *" "p_v")))
   ((:NAME . "godot_basis_get_orthogonal_index") (:RETURN--TYPE . "godot_int")
    (:ARGUMENTS ("const godot_basis *" "p_self")))
   ((:NAME . "godot_basis_new") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_basis *" "r_dest")))
   ((:NAME . "godot_basis_new_with_euler_quat") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_basis *" "r_dest") ("const godot_quat *" "p_euler")))
   ((:NAME . "godot_basis_get_elements") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("const godot_basis *" "p_self")
     ("godot_vector3 *" "p_elements")))
   ((:NAME . "godot_basis_get_axis") (:RETURN--TYPE . "godot_vector3")
    (:ARGUMENTS ("const godot_basis *" "p_self") ("const godot_int" "p_axis")))
   ((:NAME . "godot_basis_set_axis") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_basis *" "p_self") ("const godot_int" "p_axis")
     ("const godot_vector3 *" "p_value")))
   ((:NAME . "godot_basis_get_row") (:RETURN--TYPE . "godot_vector3")
    (:ARGUMENTS ("const godot_basis *" "p_self") ("const godot_int" "p_row")))
   ((:NAME . "godot_basis_set_row") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_basis *" "p_self") ("const godot_int" "p_row")
     ("const godot_vector3 *" "p_value")))
   ((:NAME . "godot_basis_operator_equal") (:RETURN--TYPE . "godot_bool")
    (:ARGUMENTS ("const godot_basis *" "p_self")
     ("const godot_basis *" "p_b")))
   ((:NAME . "godot_basis_operator_add") (:RETURN--TYPE . "godot_basis")
    (:ARGUMENTS ("const godot_basis *" "p_self")
     ("const godot_basis *" "p_b")))
   ((:NAME . "godot_basis_operator_subtract") (:RETURN--TYPE . "godot_basis")
    (:ARGUMENTS ("const godot_basis *" "p_self")
     ("const godot_basis *" "p_b")))
   ((:NAME . "godot_basis_operator_multiply_vector")
    (:RETURN--TYPE . "godot_basis")
    (:ARGUMENTS ("const godot_basis *" "p_self")
     ("const godot_basis *" "p_b")))
   ((:NAME . "godot_basis_operator_multiply_scalar")
    (:RETURN--TYPE . "godot_basis")
    (:ARGUMENTS ("const godot_basis *" "p_self") ("const godot_real" "p_b")))
   ((:NAME . "godot_vector3_new") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_vector3 *" "r_dest") ("const godot_real" "p_x")
     ("const godot_real" "p_y") ("const godot_real" "p_z")))
   ((:NAME . "godot_vector3_as_string") (:RETURN--TYPE . "godot_string")
    (:ARGUMENTS ("const godot_vector3 *" "p_self")))
   ((:NAME . "godot_vector3_min_axis") (:RETURN--TYPE . "godot_int")
    (:ARGUMENTS ("const godot_vector3 *" "p_self")))
   ((:NAME . "godot_vector3_max_axis") (:RETURN--TYPE . "godot_int")
    (:ARGUMENTS ("const godot_vector3 *" "p_self")))
   ((:NAME . "godot_vector3_length") (:RETURN--TYPE . "godot_real")
    (:ARGUMENTS ("const godot_vector3 *" "p_self")))
   ((:NAME . "godot_vector3_length_squared") (:RETURN--TYPE . "godot_real")
    (:ARGUMENTS ("const godot_vector3 *" "p_self")))
   ((:NAME . "godot_vector3_is_normalized") (:RETURN--TYPE . "godot_bool")
    (:ARGUMENTS ("const godot_vector3 *" "p_self")))
   ((:NAME . "godot_vector3_normalized") (:RETURN--TYPE . "godot_vector3")
    (:ARGUMENTS ("const godot_vector3 *" "p_self")))
   ((:NAME . "godot_vector3_inverse") (:RETURN--TYPE . "godot_vector3")
    (:ARGUMENTS ("const godot_vector3 *" "p_self")))
   ((:NAME . "godot_vector3_snapped") (:RETURN--TYPE . "godot_vector3")
    (:ARGUMENTS ("const godot_vector3 *" "p_self")
     ("const godot_vector3 *" "p_by")))
   ((:NAME . "godot_vector3_rotated") (:RETURN--TYPE . "godot_vector3")
    (:ARGUMENTS ("const godot_vector3 *" "p_self")
     ("const godot_vector3 *" "p_axis") ("const godot_real" "p_phi")))
   ((:NAME . "godot_vector3_linear_interpolate")
    (:RETURN--TYPE . "godot_vector3")
    (:ARGUMENTS ("const godot_vector3 *" "p_self")
     ("const godot_vector3 *" "p_b") ("const godot_real" "p_t")))
   ((:NAME . "godot_vector3_cubic_interpolate")
    (:RETURN--TYPE . "godot_vector3")
    (:ARGUMENTS ("const godot_vector3 *" "p_self")
     ("const godot_vector3 *" "p_b") ("const godot_vector3 *" "p_pre_a")
     ("const godot_vector3 *" "p_post_b") ("const godot_real" "p_t")))
   ((:NAME . "godot_vector3_dot") (:RETURN--TYPE . "godot_real")
    (:ARGUMENTS ("const godot_vector3 *" "p_self")
     ("const godot_vector3 *" "p_b")))
   ((:NAME . "godot_vector3_cross") (:RETURN--TYPE . "godot_vector3")
    (:ARGUMENTS ("const godot_vector3 *" "p_self")
     ("const godot_vector3 *" "p_b")))
   ((:NAME . "godot_vector3_outer") (:RETURN--TYPE . "godot_basis")
    (:ARGUMENTS ("const godot_vector3 *" "p_self")
     ("const godot_vector3 *" "p_b")))
   ((:NAME . "godot_vector3_to_diagonal_matrix")
    (:RETURN--TYPE . "godot_basis")
    (:ARGUMENTS ("const godot_vector3 *" "p_self")))
   ((:NAME . "godot_vector3_abs") (:RETURN--TYPE . "godot_vector3")
    (:ARGUMENTS ("const godot_vector3 *" "p_self")))
   ((:NAME . "godot_vector3_floor") (:RETURN--TYPE . "godot_vector3")
    (:ARGUMENTS ("const godot_vector3 *" "p_self")))
   ((:NAME . "godot_vector3_ceil") (:RETURN--TYPE . "godot_vector3")
    (:ARGUMENTS ("const godot_vector3 *" "p_self")))
   ((:NAME . "godot_vector3_distance_to") (:RETURN--TYPE . "godot_real")
    (:ARGUMENTS ("const godot_vector3 *" "p_self")
     ("const godot_vector3 *" "p_b")))
   ((:NAME . "godot_vector3_distance_squared_to")
    (:RETURN--TYPE . "godot_real")
    (:ARGUMENTS ("const godot_vector3 *" "p_self")
     ("const godot_vector3 *" "p_b")))
   ((:NAME . "godot_vector3_angle_to") (:RETURN--TYPE . "godot_real")
    (:ARGUMENTS ("const godot_vector3 *" "p_self")
     ("const godot_vector3 *" "p_to")))
   ((:NAME . "godot_vector3_slide") (:RETURN--TYPE . "godot_vector3")
    (:ARGUMENTS ("const godot_vector3 *" "p_self")
     ("const godot_vector3 *" "p_n")))
   ((:NAME . "godot_vector3_bounce") (:RETURN--TYPE . "godot_vector3")
    (:ARGUMENTS ("const godot_vector3 *" "p_self")
     ("const godot_vector3 *" "p_n")))
   ((:NAME . "godot_vector3_reflect") (:RETURN--TYPE . "godot_vector3")
    (:ARGUMENTS ("const godot_vector3 *" "p_self")
     ("const godot_vector3 *" "p_n")))
   ((:NAME . "godot_vector3_operator_add") (:RETURN--TYPE . "godot_vector3")
    (:ARGUMENTS ("const godot_vector3 *" "p_self")
     ("const godot_vector3 *" "p_b")))
   ((:NAME . "godot_vector3_operator_subtract")
    (:RETURN--TYPE . "godot_vector3")
    (:ARGUMENTS ("const godot_vector3 *" "p_self")
     ("const godot_vector3 *" "p_b")))
   ((:NAME . "godot_vector3_operator_multiply_vector")
    (:RETURN--TYPE . "godot_vector3")
    (:ARGUMENTS ("const godot_vector3 *" "p_self")
     ("const godot_vector3 *" "p_b")))
   ((:NAME . "godot_vector3_operator_multiply_scalar")
    (:RETURN--TYPE . "godot_vector3")
    (:ARGUMENTS ("const godot_vector3 *" "p_self") ("const godot_real" "p_b")))
   ((:NAME . "godot_vector3_operator_divide_vector")
    (:RETURN--TYPE . "godot_vector3")
    (:ARGUMENTS ("const godot_vector3 *" "p_self")
     ("const godot_vector3 *" "p_b")))
   ((:NAME . "godot_vector3_operator_divide_scalar")
    (:RETURN--TYPE . "godot_vector3")
    (:ARGUMENTS ("const godot_vector3 *" "p_self") ("const godot_real" "p_b")))
   ((:NAME . "godot_vector3_operator_equal") (:RETURN--TYPE . "godot_bool")
    (:ARGUMENTS ("const godot_vector3 *" "p_self")
     ("const godot_vector3 *" "p_b")))
   ((:NAME . "godot_vector3_operator_less") (:RETURN--TYPE . "godot_bool")
    (:ARGUMENTS ("const godot_vector3 *" "p_self")
     ("const godot_vector3 *" "p_b")))
   ((:NAME . "godot_vector3_operator_neg") (:RETURN--TYPE . "godot_vector3")
    (:ARGUMENTS ("const godot_vector3 *" "p_self")))
   ((:NAME . "godot_vector3_set_axis") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_vector3 *" "p_self")
     ("const godot_vector3_axis" "p_axis") ("const godot_real" "p_val")))
   ((:NAME . "godot_vector3_get_axis") (:RETURN--TYPE . "godot_real")
    (:ARGUMENTS ("const godot_vector3 *" "p_self")
     ("const godot_vector3_axis" "p_axis")))
   ((:NAME . "godot_pool_byte_array_new") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_byte_array *" "r_dest")))
   ((:NAME . "godot_pool_byte_array_new_copy") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_byte_array *" "r_dest")
     ("const godot_pool_byte_array *" "p_src")))
   ((:NAME . "godot_pool_byte_array_new_with_array") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_byte_array *" "r_dest")
     ("const godot_array *" "p_a")))
   ((:NAME . "godot_pool_byte_array_append") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_byte_array *" "p_self")
     ("const uint8_t" "p_data")))
   ((:NAME . "godot_pool_byte_array_append_array") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_byte_array *" "p_self")
     ("const godot_pool_byte_array *" "p_array")))
   ((:NAME . "godot_pool_byte_array_insert") (:RETURN--TYPE . "godot_error")
    (:ARGUMENTS ("godot_pool_byte_array *" "p_self")
     ("const godot_int" "p_idx") ("const uint8_t" "p_data")))
   ((:NAME . "godot_pool_byte_array_invert") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_byte_array *" "p_self")))
   ((:NAME . "godot_pool_byte_array_push_back") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_byte_array *" "p_self")
     ("const uint8_t" "p_data")))
   ((:NAME . "godot_pool_byte_array_remove") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_byte_array *" "p_self")
     ("const godot_int" "p_idx")))
   ((:NAME . "godot_pool_byte_array_resize") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_byte_array *" "p_self")
     ("const godot_int" "p_size")))
   ((:NAME . "godot_pool_byte_array_read")
    (:RETURN--TYPE . "godot_pool_byte_array_read_access *")
    (:ARGUMENTS ("const godot_pool_byte_array *" "p_self")))
   ((:NAME . "godot_pool_byte_array_write")
    (:RETURN--TYPE . "godot_pool_byte_array_write_access *")
    (:ARGUMENTS ("godot_pool_byte_array *" "p_self")))
   ((:NAME . "godot_pool_byte_array_set") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_byte_array *" "p_self")
     ("const godot_int" "p_idx") ("const uint8_t" "p_data")))
   ((:NAME . "godot_pool_byte_array_get") (:RETURN--TYPE . "uint8_t")
    (:ARGUMENTS ("const godot_pool_byte_array *" "p_self")
     ("const godot_int" "p_idx")))
   ((:NAME . "godot_pool_byte_array_size") (:RETURN--TYPE . "godot_int")
    (:ARGUMENTS ("const godot_pool_byte_array *" "p_self")))
   ((:NAME . "godot_pool_byte_array_destroy") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_byte_array *" "p_self")))
   ((:NAME . "godot_pool_int_array_new") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_int_array *" "r_dest")))
   ((:NAME . "godot_pool_int_array_new_copy") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_int_array *" "r_dest")
     ("const godot_pool_int_array *" "p_src")))
   ((:NAME . "godot_pool_int_array_new_with_array") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_int_array *" "r_dest")
     ("const godot_array *" "p_a")))
   ((:NAME . "godot_pool_int_array_append") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_int_array *" "p_self")
     ("const godot_int" "p_data")))
   ((:NAME . "godot_pool_int_array_append_array") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_int_array *" "p_self")
     ("const godot_pool_int_array *" "p_array")))
   ((:NAME . "godot_pool_int_array_insert") (:RETURN--TYPE . "godot_error")
    (:ARGUMENTS ("godot_pool_int_array *" "p_self") ("const godot_int" "p_idx")
     ("const godot_int" "p_data")))
   ((:NAME . "godot_pool_int_array_invert") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_int_array *" "p_self")))
   ((:NAME . "godot_pool_int_array_push_back") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_int_array *" "p_self")
     ("const godot_int" "p_data")))
   ((:NAME . "godot_pool_int_array_remove") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_int_array *" "p_self")
     ("const godot_int" "p_idx")))
   ((:NAME . "godot_pool_int_array_resize") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_int_array *" "p_self")
     ("const godot_int" "p_size")))
   ((:NAME . "godot_pool_int_array_read")
    (:RETURN--TYPE . "godot_pool_int_array_read_access *")
    (:ARGUMENTS ("const godot_pool_int_array *" "p_self")))
   ((:NAME . "godot_pool_int_array_write")
    (:RETURN--TYPE . "godot_pool_int_array_write_access *")
    (:ARGUMENTS ("godot_pool_int_array *" "p_self")))
   ((:NAME . "godot_pool_int_array_set") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_int_array *" "p_self") ("const godot_int" "p_idx")
     ("const godot_int" "p_data")))
   ((:NAME . "godot_pool_int_array_get") (:RETURN--TYPE . "godot_int")
    (:ARGUMENTS ("const godot_pool_int_array *" "p_self")
     ("const godot_int" "p_idx")))
   ((:NAME . "godot_pool_int_array_size") (:RETURN--TYPE . "godot_int")
    (:ARGUMENTS ("const godot_pool_int_array *" "p_self")))
   ((:NAME . "godot_pool_int_array_destroy") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_int_array *" "p_self")))
   ((:NAME . "godot_pool_real_array_new") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_real_array *" "r_dest")))
   ((:NAME . "godot_pool_real_array_new_copy") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_real_array *" "r_dest")
     ("const godot_pool_real_array *" "p_src")))
   ((:NAME . "godot_pool_real_array_new_with_array") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_real_array *" "r_dest")
     ("const godot_array *" "p_a")))
   ((:NAME . "godot_pool_real_array_append") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_real_array *" "p_self")
     ("const godot_real" "p_data")))
   ((:NAME . "godot_pool_real_array_append_array") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_real_array *" "p_self")
     ("const godot_pool_real_array *" "p_array")))
   ((:NAME . "godot_pool_real_array_insert") (:RETURN--TYPE . "godot_error")
    (:ARGUMENTS ("godot_pool_real_array *" "p_self")
     ("const godot_int" "p_idx") ("const godot_real" "p_data")))
   ((:NAME . "godot_pool_real_array_invert") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_real_array *" "p_self")))
   ((:NAME . "godot_pool_real_array_push_back") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_real_array *" "p_self")
     ("const godot_real" "p_data")))
   ((:NAME . "godot_pool_real_array_remove") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_real_array *" "p_self")
     ("const godot_int" "p_idx")))
   ((:NAME . "godot_pool_real_array_resize") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_real_array *" "p_self")
     ("const godot_int" "p_size")))
   ((:NAME . "godot_pool_real_array_read")
    (:RETURN--TYPE . "godot_pool_real_array_read_access *")
    (:ARGUMENTS ("const godot_pool_real_array *" "p_self")))
   ((:NAME . "godot_pool_real_array_write")
    (:RETURN--TYPE . "godot_pool_real_array_write_access *")
    (:ARGUMENTS ("godot_pool_real_array *" "p_self")))
   ((:NAME . "godot_pool_real_array_set") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_real_array *" "p_self")
     ("const godot_int" "p_idx") ("const godot_real" "p_data")))
   ((:NAME . "godot_pool_real_array_get") (:RETURN--TYPE . "godot_real")
    (:ARGUMENTS ("const godot_pool_real_array *" "p_self")
     ("const godot_int" "p_idx")))
   ((:NAME . "godot_pool_real_array_size") (:RETURN--TYPE . "godot_int")
    (:ARGUMENTS ("const godot_pool_real_array *" "p_self")))
   ((:NAME . "godot_pool_real_array_destroy") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_real_array *" "p_self")))
   ((:NAME . "godot_pool_string_array_new") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_string_array *" "r_dest")))
   ((:NAME . "godot_pool_string_array_new_copy") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_string_array *" "r_dest")
     ("const godot_pool_string_array *" "p_src")))
   ((:NAME . "godot_pool_string_array_new_with_array") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_string_array *" "r_dest")
     ("const godot_array *" "p_a")))
   ((:NAME . "godot_pool_string_array_append") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_string_array *" "p_self")
     ("const godot_string *" "p_data")))
   ((:NAME . "godot_pool_string_array_append_array") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_string_array *" "p_self")
     ("const godot_pool_string_array *" "p_array")))
   ((:NAME . "godot_pool_string_array_insert") (:RETURN--TYPE . "godot_error")
    (:ARGUMENTS ("godot_pool_string_array *" "p_self")
     ("const godot_int" "p_idx") ("const godot_string *" "p_data")))
   ((:NAME . "godot_pool_string_array_invert") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_string_array *" "p_self")))
   ((:NAME . "godot_pool_string_array_push_back") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_string_array *" "p_self")
     ("const godot_string *" "p_data")))
   ((:NAME . "godot_pool_string_array_remove") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_string_array *" "p_self")
     ("const godot_int" "p_idx")))
   ((:NAME . "godot_pool_string_array_resize") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_string_array *" "p_self")
     ("const godot_int" "p_size")))
   ((:NAME . "godot_pool_string_array_read")
    (:RETURN--TYPE . "godot_pool_string_array_read_access *")
    (:ARGUMENTS ("const godot_pool_string_array *" "p_self")))
   ((:NAME . "godot_pool_string_array_write")
    (:RETURN--TYPE . "godot_pool_string_array_write_access *")
    (:ARGUMENTS ("godot_pool_string_array *" "p_self")))
   ((:NAME . "godot_pool_string_array_set") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_string_array *" "p_self")
     ("const godot_int" "p_idx") ("const godot_string *" "p_data")))
   ((:NAME . "godot_pool_string_array_get") (:RETURN--TYPE . "godot_string")
    (:ARGUMENTS ("const godot_pool_string_array *" "p_self")
     ("const godot_int" "p_idx")))
   ((:NAME . "godot_pool_string_array_size") (:RETURN--TYPE . "godot_int")
    (:ARGUMENTS ("const godot_pool_string_array *" "p_self")))
   ((:NAME . "godot_pool_string_array_destroy") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_string_array *" "p_self")))
   ((:NAME . "godot_pool_vector2_array_new") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_vector2_array *" "r_dest")))
   ((:NAME . "godot_pool_vector2_array_new_copy") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_vector2_array *" "r_dest")
     ("const godot_pool_vector2_array *" "p_src")))
   ((:NAME . "godot_pool_vector2_array_new_with_array")
    (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_vector2_array *" "r_dest")
     ("const godot_array *" "p_a")))
   ((:NAME . "godot_pool_vector2_array_append") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_vector2_array *" "p_self")
     ("const godot_vector2 *" "p_data")))
   ((:NAME . "godot_pool_vector2_array_append_array") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_vector2_array *" "p_self")
     ("const godot_pool_vector2_array *" "p_array")))
   ((:NAME . "godot_pool_vector2_array_insert") (:RETURN--TYPE . "godot_error")
    (:ARGUMENTS ("godot_pool_vector2_array *" "p_self")
     ("const godot_int" "p_idx") ("const godot_vector2 *" "p_data")))
   ((:NAME . "godot_pool_vector2_array_invert") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_vector2_array *" "p_self")))
   ((:NAME . "godot_pool_vector2_array_push_back") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_vector2_array *" "p_self")
     ("const godot_vector2 *" "p_data")))
   ((:NAME . "godot_pool_vector2_array_remove") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_vector2_array *" "p_self")
     ("const godot_int" "p_idx")))
   ((:NAME . "godot_pool_vector2_array_resize") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_vector2_array *" "p_self")
     ("const godot_int" "p_size")))
   ((:NAME . "godot_pool_vector2_array_read")
    (:RETURN--TYPE . "godot_pool_vector2_array_read_access *")
    (:ARGUMENTS ("const godot_pool_vector2_array *" "p_self")))
   ((:NAME . "godot_pool_vector2_array_write")
    (:RETURN--TYPE . "godot_pool_vector2_array_write_access *")
    (:ARGUMENTS ("godot_pool_vector2_array *" "p_self")))
   ((:NAME . "godot_pool_vector2_array_set") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_vector2_array *" "p_self")
     ("const godot_int" "p_idx") ("const godot_vector2 *" "p_data")))
   ((:NAME . "godot_pool_vector2_array_get") (:RETURN--TYPE . "godot_vector2")
    (:ARGUMENTS ("const godot_pool_vector2_array *" "p_self")
     ("const godot_int" "p_idx")))
   ((:NAME . "godot_pool_vector2_array_size") (:RETURN--TYPE . "godot_int")
    (:ARGUMENTS ("const godot_pool_vector2_array *" "p_self")))
   ((:NAME . "godot_pool_vector2_array_destroy") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_vector2_array *" "p_self")))
   ((:NAME . "godot_pool_vector3_array_new") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_vector3_array *" "r_dest")))
   ((:NAME . "godot_pool_vector3_array_new_copy") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_vector3_array *" "r_dest")
     ("const godot_pool_vector3_array *" "p_src")))
   ((:NAME . "godot_pool_vector3_array_new_with_array")
    (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_vector3_array *" "r_dest")
     ("const godot_array *" "p_a")))
   ((:NAME . "godot_pool_vector3_array_append") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_vector3_array *" "p_self")
     ("const godot_vector3 *" "p_data")))
   ((:NAME . "godot_pool_vector3_array_append_array") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_vector3_array *" "p_self")
     ("const godot_pool_vector3_array *" "p_array")))
   ((:NAME . "godot_pool_vector3_array_insert") (:RETURN--TYPE . "godot_error")
    (:ARGUMENTS ("godot_pool_vector3_array *" "p_self")
     ("const godot_int" "p_idx") ("const godot_vector3 *" "p_data")))
   ((:NAME . "godot_pool_vector3_array_invert") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_vector3_array *" "p_self")))
   ((:NAME . "godot_pool_vector3_array_push_back") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_vector3_array *" "p_self")
     ("const godot_vector3 *" "p_data")))
   ((:NAME . "godot_pool_vector3_array_remove") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_vector3_array *" "p_self")
     ("const godot_int" "p_idx")))
   ((:NAME . "godot_pool_vector3_array_resize") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_vector3_array *" "p_self")
     ("const godot_int" "p_size")))
   ((:NAME . "godot_pool_vector3_array_read")
    (:RETURN--TYPE . "godot_pool_vector3_array_read_access *")
    (:ARGUMENTS ("const godot_pool_vector3_array *" "p_self")))
   ((:NAME . "godot_pool_vector3_array_write")
    (:RETURN--TYPE . "godot_pool_vector3_array_write_access *")
    (:ARGUMENTS ("godot_pool_vector3_array *" "p_self")))
   ((:NAME . "godot_pool_vector3_array_set") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_vector3_array *" "p_self")
     ("const godot_int" "p_idx") ("const godot_vector3 *" "p_data")))
   ((:NAME . "godot_pool_vector3_array_get") (:RETURN--TYPE . "godot_vector3")
    (:ARGUMENTS ("const godot_pool_vector3_array *" "p_self")
     ("const godot_int" "p_idx")))
   ((:NAME . "godot_pool_vector3_array_size") (:RETURN--TYPE . "godot_int")
    (:ARGUMENTS ("const godot_pool_vector3_array *" "p_self")))
   ((:NAME . "godot_pool_vector3_array_destroy") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_vector3_array *" "p_self")))
   ((:NAME . "godot_pool_color_array_new") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_color_array *" "r_dest")))
   ((:NAME . "godot_pool_color_array_new_copy") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_color_array *" "r_dest")
     ("const godot_pool_color_array *" "p_src")))
   ((:NAME . "godot_pool_color_array_new_with_array") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_color_array *" "r_dest")
     ("const godot_array *" "p_a")))
   ((:NAME . "godot_pool_color_array_append") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_color_array *" "p_self")
     ("const godot_color *" "p_data")))
   ((:NAME . "godot_pool_color_array_append_array") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_color_array *" "p_self")
     ("const godot_pool_color_array *" "p_array")))
   ((:NAME . "godot_pool_color_array_insert") (:RETURN--TYPE . "godot_error")
    (:ARGUMENTS ("godot_pool_color_array *" "p_self")
     ("const godot_int" "p_idx") ("const godot_color *" "p_data")))
   ((:NAME . "godot_pool_color_array_invert") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_color_array *" "p_self")))
   ((:NAME . "godot_pool_color_array_push_back") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_color_array *" "p_self")
     ("const godot_color *" "p_data")))
   ((:NAME . "godot_pool_color_array_remove") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_color_array *" "p_self")
     ("const godot_int" "p_idx")))
   ((:NAME . "godot_pool_color_array_resize") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_color_array *" "p_self")
     ("const godot_int" "p_size")))
   ((:NAME . "godot_pool_color_array_read")
    (:RETURN--TYPE . "godot_pool_color_array_read_access *")
    (:ARGUMENTS ("const godot_pool_color_array *" "p_self")))
   ((:NAME . "godot_pool_color_array_write")
    (:RETURN--TYPE . "godot_pool_color_array_write_access *")
    (:ARGUMENTS ("godot_pool_color_array *" "p_self")))
   ((:NAME . "godot_pool_color_array_set") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_color_array *" "p_self")
     ("const godot_int" "p_idx") ("const godot_color *" "p_data")))
   ((:NAME . "godot_pool_color_array_get") (:RETURN--TYPE . "godot_color")
    (:ARGUMENTS ("const godot_pool_color_array *" "p_self")
     ("const godot_int" "p_idx")))
   ((:NAME . "godot_pool_color_array_size") (:RETURN--TYPE . "godot_int")
    (:ARGUMENTS ("const godot_pool_color_array *" "p_self")))
   ((:NAME . "godot_pool_color_array_destroy") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_color_array *" "p_self")))
   ((:NAME . "godot_pool_byte_array_read_access_copy")
    (:RETURN--TYPE . "godot_pool_byte_array_read_access *")
    (:ARGUMENTS ("const godot_pool_byte_array_read_access *" "p_read")))
   ((:NAME . "godot_pool_byte_array_read_access_ptr")
    (:RETURN--TYPE . "const uint8_t *")
    (:ARGUMENTS ("const godot_pool_byte_array_read_access *" "p_read")))
   ((:NAME . "godot_pool_byte_array_read_access_operator_assign")
    (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_byte_array_read_access *" "p_read")
     ("godot_pool_byte_array_read_access *" "p_other")))
   ((:NAME . "godot_pool_byte_array_read_access_destroy")
    (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_byte_array_read_access *" "p_read")))
   ((:NAME . "godot_pool_int_array_read_access_copy")
    (:RETURN--TYPE . "godot_pool_int_array_read_access *")
    (:ARGUMENTS ("const godot_pool_int_array_read_access *" "p_read")))
   ((:NAME . "godot_pool_int_array_read_access_ptr")
    (:RETURN--TYPE . "const godot_int *")
    (:ARGUMENTS ("const godot_pool_int_array_read_access *" "p_read")))
   ((:NAME . "godot_pool_int_array_read_access_operator_assign")
    (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_int_array_read_access *" "p_read")
     ("godot_pool_int_array_read_access *" "p_other")))
   ((:NAME . "godot_pool_int_array_read_access_destroy")
    (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_int_array_read_access *" "p_read")))
   ((:NAME . "godot_pool_real_array_read_access_copy")
    (:RETURN--TYPE . "godot_pool_real_array_read_access *")
    (:ARGUMENTS ("const godot_pool_real_array_read_access *" "p_read")))
   ((:NAME . "godot_pool_real_array_read_access_ptr")
    (:RETURN--TYPE . "const godot_real *")
    (:ARGUMENTS ("const godot_pool_real_array_read_access *" "p_read")))
   ((:NAME . "godot_pool_real_array_read_access_operator_assign")
    (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_real_array_read_access *" "p_read")
     ("godot_pool_real_array_read_access *" "p_other")))
   ((:NAME . "godot_pool_real_array_read_access_destroy")
    (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_real_array_read_access *" "p_read")))
   ((:NAME . "godot_pool_string_array_read_access_copy")
    (:RETURN--TYPE . "godot_pool_string_array_read_access *")
    (:ARGUMENTS ("const godot_pool_string_array_read_access *" "p_read")))
   ((:NAME . "godot_pool_string_array_read_access_ptr")
    (:RETURN--TYPE . "const godot_string *")
    (:ARGUMENTS ("const godot_pool_string_array_read_access *" "p_read")))
   ((:NAME . "godot_pool_string_array_read_access_operator_assign")
    (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_string_array_read_access *" "p_read")
     ("godot_pool_string_array_read_access *" "p_other")))
   ((:NAME . "godot_pool_string_array_read_access_destroy")
    (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_string_array_read_access *" "p_read")))
   ((:NAME . "godot_pool_vector2_array_read_access_copy")
    (:RETURN--TYPE . "godot_pool_vector2_array_read_access *")
    (:ARGUMENTS ("const godot_pool_vector2_array_read_access *" "p_read")))
   ((:NAME . "godot_pool_vector2_array_read_access_ptr")
    (:RETURN--TYPE . "const godot_vector2 *")
    (:ARGUMENTS ("const godot_pool_vector2_array_read_access *" "p_read")))
   ((:NAME . "godot_pool_vector2_array_read_access_operator_assign")
    (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_vector2_array_read_access *" "p_read")
     ("godot_pool_vector2_array_read_access *" "p_other")))
   ((:NAME . "godot_pool_vector2_array_read_access_destroy")
    (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_vector2_array_read_access *" "p_read")))
   ((:NAME . "godot_pool_vector3_array_read_access_copy")
    (:RETURN--TYPE . "godot_pool_vector3_array_read_access *")
    (:ARGUMENTS ("const godot_pool_vector3_array_read_access *" "p_read")))
   ((:NAME . "godot_pool_vector3_array_read_access_ptr")
    (:RETURN--TYPE . "const godot_vector3 *")
    (:ARGUMENTS ("const godot_pool_vector3_array_read_access *" "p_read")))
   ((:NAME . "godot_pool_vector3_array_read_access_operator_assign")
    (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_vector3_array_read_access *" "p_read")
     ("godot_pool_vector3_array_read_access *" "p_other")))
   ((:NAME . "godot_pool_vector3_array_read_access_destroy")
    (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_vector3_array_read_access *" "p_read")))
   ((:NAME . "godot_pool_color_array_read_access_copy")
    (:RETURN--TYPE . "godot_pool_color_array_read_access *")
    (:ARGUMENTS ("const godot_pool_color_array_read_access *" "p_read")))
   ((:NAME . "godot_pool_color_array_read_access_ptr")
    (:RETURN--TYPE . "const godot_color *")
    (:ARGUMENTS ("const godot_pool_color_array_read_access *" "p_read")))
   ((:NAME . "godot_pool_color_array_read_access_operator_assign")
    (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_color_array_read_access *" "p_read")
     ("godot_pool_color_array_read_access *" "p_other")))
   ((:NAME . "godot_pool_color_array_read_access_destroy")
    (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_color_array_read_access *" "p_read")))
   ((:NAME . "godot_pool_byte_array_write_access_copy")
    (:RETURN--TYPE . "godot_pool_byte_array_write_access *")
    (:ARGUMENTS ("const godot_pool_byte_array_write_access *" "p_write")))
   ((:NAME . "godot_pool_byte_array_write_access_ptr")
    (:RETURN--TYPE . "uint8_t *")
    (:ARGUMENTS ("const godot_pool_byte_array_write_access *" "p_write")))
   ((:NAME . "godot_pool_byte_array_write_access_operator_assign")
    (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_byte_array_write_access *" "p_write")
     ("godot_pool_byte_array_write_access *" "p_other")))
   ((:NAME . "godot_pool_byte_array_write_access_destroy")
    (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_byte_array_write_access *" "p_write")))
   ((:NAME . "godot_pool_int_array_write_access_copy")
    (:RETURN--TYPE . "godot_pool_int_array_write_access *")
    (:ARGUMENTS ("const godot_pool_int_array_write_access *" "p_write")))
   ((:NAME . "godot_pool_int_array_write_access_ptr")
    (:RETURN--TYPE . "godot_int *")
    (:ARGUMENTS ("const godot_pool_int_array_write_access *" "p_write")))
   ((:NAME . "godot_pool_int_array_write_access_operator_assign")
    (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_int_array_write_access *" "p_write")
     ("godot_pool_int_array_write_access *" "p_other")))
   ((:NAME . "godot_pool_int_array_write_access_destroy")
    (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_int_array_write_access *" "p_write")))
   ((:NAME . "godot_pool_real_array_write_access_copy")
    (:RETURN--TYPE . "godot_pool_real_array_write_access *")
    (:ARGUMENTS ("const godot_pool_real_array_write_access *" "p_write")))
   ((:NAME . "godot_pool_real_array_write_access_ptr")
    (:RETURN--TYPE . "godot_real *")
    (:ARGUMENTS ("const godot_pool_real_array_write_access *" "p_write")))
   ((:NAME . "godot_pool_real_array_write_access_operator_assign")
    (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_real_array_write_access *" "p_write")
     ("godot_pool_real_array_write_access *" "p_other")))
   ((:NAME . "godot_pool_real_array_write_access_destroy")
    (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_real_array_write_access *" "p_write")))
   ((:NAME . "godot_pool_string_array_write_access_copy")
    (:RETURN--TYPE . "godot_pool_string_array_write_access *")
    (:ARGUMENTS ("const godot_pool_string_array_write_access *" "p_write")))
   ((:NAME . "godot_pool_string_array_write_access_ptr")
    (:RETURN--TYPE . "godot_string *")
    (:ARGUMENTS ("const godot_pool_string_array_write_access *" "p_write")))
   ((:NAME . "godot_pool_string_array_write_access_operator_assign")
    (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_string_array_write_access *" "p_write")
     ("godot_pool_string_array_write_access *" "p_other")))
   ((:NAME . "godot_pool_string_array_write_access_destroy")
    (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_string_array_write_access *" "p_write")))
   ((:NAME . "godot_pool_vector2_array_write_access_copy")
    (:RETURN--TYPE . "godot_pool_vector2_array_write_access *")
    (:ARGUMENTS ("const godot_pool_vector2_array_write_access *" "p_write")))
   ((:NAME . "godot_pool_vector2_array_write_access_ptr")
    (:RETURN--TYPE . "godot_vector2 *")
    (:ARGUMENTS ("const godot_pool_vector2_array_write_access *" "p_write")))
   ((:NAME . "godot_pool_vector2_array_write_access_operator_assign")
    (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_vector2_array_write_access *" "p_write")
     ("godot_pool_vector2_array_write_access *" "p_other")))
   ((:NAME . "godot_pool_vector2_array_write_access_destroy")
    (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_vector2_array_write_access *" "p_write")))
   ((:NAME . "godot_pool_vector3_array_write_access_copy")
    (:RETURN--TYPE . "godot_pool_vector3_array_write_access *")
    (:ARGUMENTS ("const godot_pool_vector3_array_write_access *" "p_write")))
   ((:NAME . "godot_pool_vector3_array_write_access_ptr")
    (:RETURN--TYPE . "godot_vector3 *")
    (:ARGUMENTS ("const godot_pool_vector3_array_write_access *" "p_write")))
   ((:NAME . "godot_pool_vector3_array_write_access_operator_assign")
    (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_vector3_array_write_access *" "p_write")
     ("godot_pool_vector3_array_write_access *" "p_other")))
   ((:NAME . "godot_pool_vector3_array_write_access_destroy")
    (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_vector3_array_write_access *" "p_write")))
   ((:NAME . "godot_pool_color_array_write_access_copy")
    (:RETURN--TYPE . "godot_pool_color_array_write_access *")
    (:ARGUMENTS ("const godot_pool_color_array_write_access *" "p_write")))
   ((:NAME . "godot_pool_color_array_write_access_ptr")
    (:RETURN--TYPE . "godot_color *")
    (:ARGUMENTS ("const godot_pool_color_array_write_access *" "p_write")))
   ((:NAME . "godot_pool_color_array_write_access_operator_assign")
    (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_color_array_write_access *" "p_write")
     ("godot_pool_color_array_write_access *" "p_other")))
   ((:NAME . "godot_pool_color_array_write_access_destroy")
    (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_pool_color_array_write_access *" "p_write")))
   ((:NAME . "godot_array_new") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_array *" "r_dest")))
   ((:NAME . "godot_array_new_copy") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_array *" "r_dest") ("const godot_array *" "p_src")))
   ((:NAME . "godot_array_new_pool_color_array") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_array *" "r_dest")
     ("const godot_pool_color_array *" "p_pca")))
   ((:NAME . "godot_array_new_pool_vector3_array") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_array *" "r_dest")
     ("const godot_pool_vector3_array *" "p_pv3a")))
   ((:NAME . "godot_array_new_pool_vector2_array") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_array *" "r_dest")
     ("const godot_pool_vector2_array *" "p_pv2a")))
   ((:NAME . "godot_array_new_pool_string_array") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_array *" "r_dest")
     ("const godot_pool_string_array *" "p_psa")))
   ((:NAME . "godot_array_new_pool_real_array") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_array *" "r_dest")
     ("const godot_pool_real_array *" "p_pra")))
   ((:NAME . "godot_array_new_pool_int_array") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_array *" "r_dest")
     ("const godot_pool_int_array *" "p_pia")))
   ((:NAME . "godot_array_new_pool_byte_array") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_array *" "r_dest")
     ("const godot_pool_byte_array *" "p_pba")))
   ((:NAME . "godot_array_set") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_array *" "p_self") ("const godot_int" "p_idx")
     ("const godot_variant *" "p_value")))
   ((:NAME . "godot_array_get") (:RETURN--TYPE . "godot_variant")
    (:ARGUMENTS ("const godot_array *" "p_self") ("const godot_int" "p_idx")))
   ((:NAME . "godot_array_operator_index") (:RETURN--TYPE . "godot_variant *")
    (:ARGUMENTS ("godot_array *" "p_self") ("const godot_int" "p_idx")))
   ((:NAME . "godot_array_operator_index_const")
    (:RETURN--TYPE . "const godot_variant *")
    (:ARGUMENTS ("const godot_array *" "p_self") ("const godot_int" "p_idx")))
   ((:NAME . "godot_array_append") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_array *" "p_self")
     ("const godot_variant *" "p_value")))
   ((:NAME . "godot_array_clear") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_array *" "p_self")))
   ((:NAME . "godot_array_count") (:RETURN--TYPE . "godot_int")
    (:ARGUMENTS ("const godot_array *" "p_self")
     ("const godot_variant *" "p_value")))
   ((:NAME . "godot_array_empty") (:RETURN--TYPE . "godot_bool")
    (:ARGUMENTS ("const godot_array *" "p_self")))
   ((:NAME . "godot_array_erase") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_array *" "p_self")
     ("const godot_variant *" "p_value")))
   ((:NAME . "godot_array_front") (:RETURN--TYPE . "godot_variant")
    (:ARGUMENTS ("const godot_array *" "p_self")))
   ((:NAME . "godot_array_back") (:RETURN--TYPE . "godot_variant")
    (:ARGUMENTS ("const godot_array *" "p_self")))
   ((:NAME . "godot_array_find") (:RETURN--TYPE . "godot_int")
    (:ARGUMENTS ("const godot_array *" "p_self")
     ("const godot_variant *" "p_what") ("const godot_int" "p_from")))
   ((:NAME . "godot_array_find_last") (:RETURN--TYPE . "godot_int")
    (:ARGUMENTS ("const godot_array *" "p_self")
     ("const godot_variant *" "p_what")))
   ((:NAME . "godot_array_has") (:RETURN--TYPE . "godot_bool")
    (:ARGUMENTS ("const godot_array *" "p_self")
     ("const godot_variant *" "p_value")))
   ((:NAME . "godot_array_hash") (:RETURN--TYPE . "godot_int")
    (:ARGUMENTS ("const godot_array *" "p_self")))
   ((:NAME . "godot_array_insert") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_array *" "p_self") ("const godot_int" "p_pos")
     ("const godot_variant *" "p_value")))
   ((:NAME . "godot_array_invert") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_array *" "p_self")))
   ((:NAME . "godot_array_pop_back") (:RETURN--TYPE . "godot_variant")
    (:ARGUMENTS ("godot_array *" "p_self")))
   ((:NAME . "godot_array_pop_front") (:RETURN--TYPE . "godot_variant")
    (:ARGUMENTS ("godot_array *" "p_self")))
   ((:NAME . "godot_array_push_back") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_array *" "p_self")
     ("const godot_variant *" "p_value")))
   ((:NAME . "godot_array_push_front") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_array *" "p_self")
     ("const godot_variant *" "p_value")))
   ((:NAME . "godot_array_remove") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_array *" "p_self") ("const godot_int" "p_idx")))
   ((:NAME . "godot_array_resize") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_array *" "p_self") ("const godot_int" "p_size")))
   ((:NAME . "godot_array_rfind") (:RETURN--TYPE . "godot_int")
    (:ARGUMENTS ("const godot_array *" "p_self")
     ("const godot_variant *" "p_what") ("const godot_int" "p_from")))
   ((:NAME . "godot_array_size") (:RETURN--TYPE . "godot_int")
    (:ARGUMENTS ("const godot_array *" "p_self")))
   ((:NAME . "godot_array_sort") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_array *" "p_self")))
   ((:NAME . "godot_array_sort_custom") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_array *" "p_self") ("godot_object *" "p_obj")
     ("const godot_string *" "p_func")))
   ((:NAME . "godot_array_bsearch") (:RETURN--TYPE . "godot_int")
    (:ARGUMENTS ("godot_array *" "p_self") ("const godot_variant *" "p_value")
     ("const godot_bool" "p_before")))
   ((:NAME . "godot_array_bsearch_custom") (:RETURN--TYPE . "godot_int")
    (:ARGUMENTS ("godot_array *" "p_self") ("const godot_variant *" "p_value")
     ("godot_object *" "p_obj") ("const godot_string *" "p_func")
     ("const godot_bool" "p_before")))
   ((:NAME . "godot_array_destroy") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_array *" "p_self")))
   ((:NAME . "godot_dictionary_new") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_dictionary *" "r_dest")))
   ((:NAME . "godot_dictionary_new_copy") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_dictionary *" "r_dest")
     ("const godot_dictionary *" "p_src")))
   ((:NAME . "godot_dictionary_destroy") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_dictionary *" "p_self")))
   ((:NAME . "godot_dictionary_size") (:RETURN--TYPE . "godot_int")
    (:ARGUMENTS ("const godot_dictionary *" "p_self")))
   ((:NAME . "godot_dictionary_empty") (:RETURN--TYPE . "godot_bool")
    (:ARGUMENTS ("const godot_dictionary *" "p_self")))
   ((:NAME . "godot_dictionary_clear") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_dictionary *" "p_self")))
   ((:NAME . "godot_dictionary_has") (:RETURN--TYPE . "godot_bool")
    (:ARGUMENTS ("const godot_dictionary *" "p_self")
     ("const godot_variant *" "p_key")))
   ((:NAME . "godot_dictionary_has_all") (:RETURN--TYPE . "godot_bool")
    (:ARGUMENTS ("const godot_dictionary *" "p_self")
     ("const godot_array *" "p_keys")))
   ((:NAME . "godot_dictionary_erase") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_dictionary *" "p_self")
     ("const godot_variant *" "p_key")))
   ((:NAME . "godot_dictionary_hash") (:RETURN--TYPE . "godot_int")
    (:ARGUMENTS ("const godot_dictionary *" "p_self")))
   ((:NAME . "godot_dictionary_keys") (:RETURN--TYPE . "godot_array")
    (:ARGUMENTS ("const godot_dictionary *" "p_self")))
   ((:NAME . "godot_dictionary_values") (:RETURN--TYPE . "godot_array")
    (:ARGUMENTS ("const godot_dictionary *" "p_self")))
   ((:NAME . "godot_dictionary_get") (:RETURN--TYPE . "godot_variant")
    (:ARGUMENTS ("const godot_dictionary *" "p_self")
     ("const godot_variant *" "p_key")))
   ((:NAME . "godot_dictionary_set") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_dictionary *" "p_self")
     ("const godot_variant *" "p_key") ("const godot_variant *" "p_value")))
   ((:NAME . "godot_dictionary_operator_index")
    (:RETURN--TYPE . "godot_variant *")
    (:ARGUMENTS ("godot_dictionary *" "p_self")
     ("const godot_variant *" "p_key")))
   ((:NAME . "godot_dictionary_operator_index_const")
    (:RETURN--TYPE . "const godot_variant *")
    (:ARGUMENTS ("const godot_dictionary *" "p_self")
     ("const godot_variant *" "p_key")))
   ((:NAME . "godot_dictionary_next") (:RETURN--TYPE . "godot_variant *")
    (:ARGUMENTS ("const godot_dictionary *" "p_self")
     ("const godot_variant *" "p_key")))
   ((:NAME . "godot_dictionary_operator_equal") (:RETURN--TYPE . "godot_bool")
    (:ARGUMENTS ("const godot_dictionary *" "p_self")
     ("const godot_dictionary *" "p_b")))
   ((:NAME . "godot_dictionary_to_json") (:RETURN--TYPE . "godot_string")
    (:ARGUMENTS ("const godot_dictionary *" "p_self")))
   ((:NAME . "godot_node_path_new") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_node_path *" "r_dest")
     ("const godot_string *" "p_from")))
   ((:NAME . "godot_node_path_new_copy") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_node_path *" "r_dest")
     ("const godot_node_path *" "p_src")))
   ((:NAME . "godot_node_path_destroy") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_node_path *" "p_self")))
   ((:NAME . "godot_node_path_as_string") (:RETURN--TYPE . "godot_string")
    (:ARGUMENTS ("const godot_node_path *" "p_self")))
   ((:NAME . "godot_node_path_is_absolute") (:RETURN--TYPE . "godot_bool")
    (:ARGUMENTS ("const godot_node_path *" "p_self")))
   ((:NAME . "godot_node_path_get_name_count") (:RETURN--TYPE . "godot_int")
    (:ARGUMENTS ("const godot_node_path *" "p_self")))
   ((:NAME . "godot_node_path_get_name") (:RETURN--TYPE . "godot_string")
    (:ARGUMENTS ("const godot_node_path *" "p_self")
     ("const godot_int" "p_idx")))
   ((:NAME . "godot_node_path_get_subname_count") (:RETURN--TYPE . "godot_int")
    (:ARGUMENTS ("const godot_node_path *" "p_self")))
   ((:NAME . "godot_node_path_get_subname") (:RETURN--TYPE . "godot_string")
    (:ARGUMENTS ("const godot_node_path *" "p_self")
     ("const godot_int" "p_idx")))
   ((:NAME . "godot_node_path_get_concatenated_subnames")
    (:RETURN--TYPE . "godot_string")
    (:ARGUMENTS ("const godot_node_path *" "p_self")))
   ((:NAME . "godot_node_path_is_empty") (:RETURN--TYPE . "godot_bool")
    (:ARGUMENTS ("const godot_node_path *" "p_self")))
   ((:NAME . "godot_node_path_operator_equal") (:RETURN--TYPE . "godot_bool")
    (:ARGUMENTS ("const godot_node_path *" "p_self")
     ("const godot_node_path *" "p_b")))
   ((:NAME . "godot_plane_new_with_reals") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_plane *" "r_dest") ("const godot_real" "p_a")
     ("const godot_real" "p_b") ("const godot_real" "p_c")
     ("const godot_real" "p_d")))
   ((:NAME . "godot_plane_new_with_vectors") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_plane *" "r_dest") ("const godot_vector3 *" "p_v1")
     ("const godot_vector3 *" "p_v2") ("const godot_vector3 *" "p_v3")))
   ((:NAME . "godot_plane_new_with_normal") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_plane *" "r_dest") ("const godot_vector3 *" "p_normal")
     ("const godot_real" "p_d")))
   ((:NAME . "godot_plane_as_string") (:RETURN--TYPE . "godot_string")
    (:ARGUMENTS ("const godot_plane *" "p_self")))
   ((:NAME . "godot_plane_normalized") (:RETURN--TYPE . "godot_plane")
    (:ARGUMENTS ("const godot_plane *" "p_self")))
   ((:NAME . "godot_plane_center") (:RETURN--TYPE . "godot_vector3")
    (:ARGUMENTS ("const godot_plane *" "p_self")))
   ((:NAME . "godot_plane_get_any_point") (:RETURN--TYPE . "godot_vector3")
    (:ARGUMENTS ("const godot_plane *" "p_self")))
   ((:NAME . "godot_plane_is_point_over") (:RETURN--TYPE . "godot_bool")
    (:ARGUMENTS ("const godot_plane *" "p_self")
     ("const godot_vector3 *" "p_point")))
   ((:NAME . "godot_plane_distance_to") (:RETURN--TYPE . "godot_real")
    (:ARGUMENTS ("const godot_plane *" "p_self")
     ("const godot_vector3 *" "p_point")))
   ((:NAME . "godot_plane_has_point") (:RETURN--TYPE . "godot_bool")
    (:ARGUMENTS ("const godot_plane *" "p_self")
     ("const godot_vector3 *" "p_point") ("const godot_real" "p_epsilon")))
   ((:NAME . "godot_plane_project") (:RETURN--TYPE . "godot_vector3")
    (:ARGUMENTS ("const godot_plane *" "p_self")
     ("const godot_vector3 *" "p_point")))
   ((:NAME . "godot_plane_intersect_3") (:RETURN--TYPE . "godot_bool")
    (:ARGUMENTS ("const godot_plane *" "p_self") ("godot_vector3 *" "r_dest")
     ("const godot_plane *" "p_b") ("const godot_plane *" "p_c")))
   ((:NAME . "godot_plane_intersects_ray") (:RETURN--TYPE . "godot_bool")
    (:ARGUMENTS ("const godot_plane *" "p_self") ("godot_vector3 *" "r_dest")
     ("const godot_vector3 *" "p_from") ("const godot_vector3 *" "p_dir")))
   ((:NAME . "godot_plane_intersects_segment") (:RETURN--TYPE . "godot_bool")
    (:ARGUMENTS ("const godot_plane *" "p_self") ("godot_vector3 *" "r_dest")
     ("const godot_vector3 *" "p_begin") ("const godot_vector3 *" "p_end")))
   ((:NAME . "godot_plane_operator_neg") (:RETURN--TYPE . "godot_plane")
    (:ARGUMENTS ("const godot_plane *" "p_self")))
   ((:NAME . "godot_plane_operator_equal") (:RETURN--TYPE . "godot_bool")
    (:ARGUMENTS ("const godot_plane *" "p_self")
     ("const godot_plane *" "p_b")))
   ((:NAME . "godot_plane_set_normal") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_plane *" "p_self")
     ("const godot_vector3 *" "p_normal")))
   ((:NAME . "godot_plane_get_normal") (:RETURN--TYPE . "godot_vector3")
    (:ARGUMENTS ("const godot_plane *" "p_self")))
   ((:NAME . "godot_plane_get_d") (:RETURN--TYPE . "godot_real")
    (:ARGUMENTS ("const godot_plane *" "p_self")))
   ((:NAME . "godot_plane_set_d") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_plane *" "p_self") ("const godot_real" "p_d")))
   ((:NAME . "godot_rect2_new_with_position_and_size") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_rect2 *" "r_dest") ("const godot_vector2 *" "p_pos")
     ("const godot_vector2 *" "p_size")))
   ((:NAME . "godot_rect2_new") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_rect2 *" "r_dest") ("const godot_real" "p_x")
     ("const godot_real" "p_y") ("const godot_real" "p_width")
     ("const godot_real" "p_height")))
   ((:NAME . "godot_rect2_as_string") (:RETURN--TYPE . "godot_string")
    (:ARGUMENTS ("const godot_rect2 *" "p_self")))
   ((:NAME . "godot_rect2_get_area") (:RETURN--TYPE . "godot_real")
    (:ARGUMENTS ("const godot_rect2 *" "p_self")))
   ((:NAME . "godot_rect2_intersects") (:RETURN--TYPE . "godot_bool")
    (:ARGUMENTS ("const godot_rect2 *" "p_self")
     ("const godot_rect2 *" "p_b")))
   ((:NAME . "godot_rect2_encloses") (:RETURN--TYPE . "godot_bool")
    (:ARGUMENTS ("const godot_rect2 *" "p_self")
     ("const godot_rect2 *" "p_b")))
   ((:NAME . "godot_rect2_has_no_area") (:RETURN--TYPE . "godot_bool")
    (:ARGUMENTS ("const godot_rect2 *" "p_self")))
   ((:NAME . "godot_rect2_clip") (:RETURN--TYPE . "godot_rect2")
    (:ARGUMENTS ("const godot_rect2 *" "p_self")
     ("const godot_rect2 *" "p_b")))
   ((:NAME . "godot_rect2_merge") (:RETURN--TYPE . "godot_rect2")
    (:ARGUMENTS ("const godot_rect2 *" "p_self")
     ("const godot_rect2 *" "p_b")))
   ((:NAME . "godot_rect2_has_point") (:RETURN--TYPE . "godot_bool")
    (:ARGUMENTS ("const godot_rect2 *" "p_self")
     ("const godot_vector2 *" "p_point")))
   ((:NAME . "godot_rect2_grow") (:RETURN--TYPE . "godot_rect2")
    (:ARGUMENTS ("const godot_rect2 *" "p_self") ("const godot_real" "p_by")))
   ((:NAME . "godot_rect2_expand") (:RETURN--TYPE . "godot_rect2")
    (:ARGUMENTS ("const godot_rect2 *" "p_self")
     ("const godot_vector2 *" "p_to")))
   ((:NAME . "godot_rect2_operator_equal") (:RETURN--TYPE . "godot_bool")
    (:ARGUMENTS ("const godot_rect2 *" "p_self")
     ("const godot_rect2 *" "p_b")))
   ((:NAME . "godot_rect2_get_position") (:RETURN--TYPE . "godot_vector2")
    (:ARGUMENTS ("const godot_rect2 *" "p_self")))
   ((:NAME . "godot_rect2_get_size") (:RETURN--TYPE . "godot_vector2")
    (:ARGUMENTS ("const godot_rect2 *" "p_self")))
   ((:NAME . "godot_rect2_set_position") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_rect2 *" "p_self") ("const godot_vector2 *" "p_pos")))
   ((:NAME . "godot_rect2_set_size") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_rect2 *" "p_self") ("const godot_vector2 *" "p_size")))
   ((:NAME . "godot_aabb_new") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_aabb *" "r_dest") ("const godot_vector3 *" "p_pos")
     ("const godot_vector3 *" "p_size")))
   ((:NAME . "godot_aabb_get_position") (:RETURN--TYPE . "godot_vector3")
    (:ARGUMENTS ("const godot_aabb *" "p_self")))
   ((:NAME . "godot_aabb_set_position") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("const godot_aabb *" "p_self")
     ("const godot_vector3 *" "p_v")))
   ((:NAME . "godot_aabb_get_size") (:RETURN--TYPE . "godot_vector3")
    (:ARGUMENTS ("const godot_aabb *" "p_self")))
   ((:NAME . "godot_aabb_set_size") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("const godot_aabb *" "p_self")
     ("const godot_vector3 *" "p_v")))
   ((:NAME . "godot_aabb_as_string") (:RETURN--TYPE . "godot_string")
    (:ARGUMENTS ("const godot_aabb *" "p_self")))
   ((:NAME . "godot_aabb_get_area") (:RETURN--TYPE . "godot_real")
    (:ARGUMENTS ("const godot_aabb *" "p_self")))
   ((:NAME . "godot_aabb_has_no_area") (:RETURN--TYPE . "godot_bool")
    (:ARGUMENTS ("const godot_aabb *" "p_self")))
   ((:NAME . "godot_aabb_has_no_surface") (:RETURN--TYPE . "godot_bool")
    (:ARGUMENTS ("const godot_aabb *" "p_self")))
   ((:NAME . "godot_aabb_intersects") (:RETURN--TYPE . "godot_bool")
    (:ARGUMENTS ("const godot_aabb *" "p_self")
     ("const godot_aabb *" "p_with")))
   ((:NAME . "godot_aabb_encloses") (:RETURN--TYPE . "godot_bool")
    (:ARGUMENTS ("const godot_aabb *" "p_self")
     ("const godot_aabb *" "p_with")))
   ((:NAME . "godot_aabb_merge") (:RETURN--TYPE . "godot_aabb")
    (:ARGUMENTS ("const godot_aabb *" "p_self")
     ("const godot_aabb *" "p_with")))
   ((:NAME . "godot_aabb_intersection") (:RETURN--TYPE . "godot_aabb")
    (:ARGUMENTS ("const godot_aabb *" "p_self")
     ("const godot_aabb *" "p_with")))
   ((:NAME . "godot_aabb_intersects_plane") (:RETURN--TYPE . "godot_bool")
    (:ARGUMENTS ("const godot_aabb *" "p_self")
     ("const godot_plane *" "p_plane")))
   ((:NAME . "godot_aabb_intersects_segment") (:RETURN--TYPE . "godot_bool")
    (:ARGUMENTS ("const godot_aabb *" "p_self")
     ("const godot_vector3 *" "p_from") ("const godot_vector3 *" "p_to")))
   ((:NAME . "godot_aabb_has_point") (:RETURN--TYPE . "godot_bool")
    (:ARGUMENTS ("const godot_aabb *" "p_self")
     ("const godot_vector3 *" "p_point")))
   ((:NAME . "godot_aabb_get_support") (:RETURN--TYPE . "godot_vector3")
    (:ARGUMENTS ("const godot_aabb *" "p_self")
     ("const godot_vector3 *" "p_dir")))
   ((:NAME . "godot_aabb_get_longest_axis") (:RETURN--TYPE . "godot_vector3")
    (:ARGUMENTS ("const godot_aabb *" "p_self")))
   ((:NAME . "godot_aabb_get_longest_axis_index") (:RETURN--TYPE . "godot_int")
    (:ARGUMENTS ("const godot_aabb *" "p_self")))
   ((:NAME . "godot_aabb_get_longest_axis_size") (:RETURN--TYPE . "godot_real")
    (:ARGUMENTS ("const godot_aabb *" "p_self")))
   ((:NAME . "godot_aabb_get_shortest_axis") (:RETURN--TYPE . "godot_vector3")
    (:ARGUMENTS ("const godot_aabb *" "p_self")))
   ((:NAME . "godot_aabb_get_shortest_axis_index")
    (:RETURN--TYPE . "godot_int") (:ARGUMENTS ("const godot_aabb *" "p_self")))
   ((:NAME . "godot_aabb_get_shortest_axis_size")
    (:RETURN--TYPE . "godot_real")
    (:ARGUMENTS ("const godot_aabb *" "p_self")))
   ((:NAME . "godot_aabb_expand") (:RETURN--TYPE . "godot_aabb")
    (:ARGUMENTS ("const godot_aabb *" "p_self")
     ("const godot_vector3 *" "p_to_point")))
   ((:NAME . "godot_aabb_grow") (:RETURN--TYPE . "godot_aabb")
    (:ARGUMENTS ("const godot_aabb *" "p_self") ("const godot_real" "p_by")))
   ((:NAME . "godot_aabb_get_endpoint") (:RETURN--TYPE . "godot_vector3")
    (:ARGUMENTS ("const godot_aabb *" "p_self") ("const godot_int" "p_idx")))
   ((:NAME . "godot_aabb_operator_equal") (:RETURN--TYPE . "godot_bool")
    (:ARGUMENTS ("const godot_aabb *" "p_self") ("const godot_aabb *" "p_b")))
   ((:NAME . "godot_rid_new") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_rid *" "r_dest")))
   ((:NAME . "godot_rid_get_id") (:RETURN--TYPE . "godot_int")
    (:ARGUMENTS ("const godot_rid *" "p_self")))
   ((:NAME . "godot_rid_new_with_resource") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_rid *" "r_dest") ("const godot_object *" "p_from")))
   ((:NAME . "godot_rid_operator_equal") (:RETURN--TYPE . "godot_bool")
    (:ARGUMENTS ("const godot_rid *" "p_self") ("const godot_rid *" "p_b")))
   ((:NAME . "godot_rid_operator_less") (:RETURN--TYPE . "godot_bool")
    (:ARGUMENTS ("const godot_rid *" "p_self") ("const godot_rid *" "p_b")))
   ((:NAME . "godot_transform_new_with_axis_origin") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_transform *" "r_dest")
     ("const godot_vector3 *" "p_x_axis") ("const godot_vector3 *" "p_y_axis")
     ("const godot_vector3 *" "p_z_axis")
     ("const godot_vector3 *" "p_origin")))
   ((:NAME . "godot_transform_new") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_transform *" "r_dest")
     ("const godot_basis *" "p_basis") ("const godot_vector3 *" "p_origin")))
   ((:NAME . "godot_transform_get_basis") (:RETURN--TYPE . "godot_basis")
    (:ARGUMENTS ("const godot_transform *" "p_self")))
   ((:NAME . "godot_transform_set_basis") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_transform *" "p_self") ("const godot_basis *" "p_v")))
   ((:NAME . "godot_transform_get_origin") (:RETURN--TYPE . "godot_vector3")
    (:ARGUMENTS ("const godot_transform *" "p_self")))
   ((:NAME . "godot_transform_set_origin") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_transform *" "p_self")
     ("const godot_vector3 *" "p_v")))
   ((:NAME . "godot_transform_as_string") (:RETURN--TYPE . "godot_string")
    (:ARGUMENTS ("const godot_transform *" "p_self")))
   ((:NAME . "godot_transform_inverse") (:RETURN--TYPE . "godot_transform")
    (:ARGUMENTS ("const godot_transform *" "p_self")))
   ((:NAME . "godot_transform_affine_inverse")
    (:RETURN--TYPE . "godot_transform")
    (:ARGUMENTS ("const godot_transform *" "p_self")))
   ((:NAME . "godot_transform_orthonormalized")
    (:RETURN--TYPE . "godot_transform")
    (:ARGUMENTS ("const godot_transform *" "p_self")))
   ((:NAME . "godot_transform_rotated") (:RETURN--TYPE . "godot_transform")
    (:ARGUMENTS ("const godot_transform *" "p_self")
     ("const godot_vector3 *" "p_axis") ("const godot_real" "p_phi")))
   ((:NAME . "godot_transform_scaled") (:RETURN--TYPE . "godot_transform")
    (:ARGUMENTS ("const godot_transform *" "p_self")
     ("const godot_vector3 *" "p_scale")))
   ((:NAME . "godot_transform_translated") (:RETURN--TYPE . "godot_transform")
    (:ARGUMENTS ("const godot_transform *" "p_self")
     ("const godot_vector3 *" "p_ofs")))
   ((:NAME . "godot_transform_looking_at") (:RETURN--TYPE . "godot_transform")
    (:ARGUMENTS ("const godot_transform *" "p_self")
     ("const godot_vector3 *" "p_target") ("const godot_vector3 *" "p_up")))
   ((:NAME . "godot_transform_xform_plane") (:RETURN--TYPE . "godot_plane")
    (:ARGUMENTS ("const godot_transform *" "p_self")
     ("const godot_plane *" "p_v")))
   ((:NAME . "godot_transform_xform_inv_plane") (:RETURN--TYPE . "godot_plane")
    (:ARGUMENTS ("const godot_transform *" "p_self")
     ("const godot_plane *" "p_v")))
   ((:NAME . "godot_transform_new_identity") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_transform *" "r_dest")))
   ((:NAME . "godot_transform_operator_equal") (:RETURN--TYPE . "godot_bool")
    (:ARGUMENTS ("const godot_transform *" "p_self")
     ("const godot_transform *" "p_b")))
   ((:NAME . "godot_transform_operator_multiply")
    (:RETURN--TYPE . "godot_transform")
    (:ARGUMENTS ("const godot_transform *" "p_self")
     ("const godot_transform *" "p_b")))
   ((:NAME . "godot_transform_xform_vector3") (:RETURN--TYPE . "godot_vector3")
    (:ARGUMENTS ("const godot_transform *" "p_self")
     ("const godot_vector3 *" "p_v")))
   ((:NAME . "godot_transform_xform_inv_vector3")
    (:RETURN--TYPE . "godot_vector3")
    (:ARGUMENTS ("const godot_transform *" "p_self")
     ("const godot_vector3 *" "p_v")))
   ((:NAME . "godot_transform_xform_aabb") (:RETURN--TYPE . "godot_aabb")
    (:ARGUMENTS ("const godot_transform *" "p_self")
     ("const godot_aabb *" "p_v")))
   ((:NAME . "godot_transform_xform_inv_aabb") (:RETURN--TYPE . "godot_aabb")
    (:ARGUMENTS ("const godot_transform *" "p_self")
     ("const godot_aabb *" "p_v")))
   ((:NAME . "godot_transform2d_new") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_transform2d *" "r_dest") ("const godot_real" "p_rot")
     ("const godot_vector2 *" "p_pos")))
   ((:NAME . "godot_transform2d_new_axis_origin") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_transform2d *" "r_dest")
     ("const godot_vector2 *" "p_x_axis") ("const godot_vector2 *" "p_y_axis")
     ("const godot_vector2 *" "p_origin")))
   ((:NAME . "godot_transform2d_as_string") (:RETURN--TYPE . "godot_string")
    (:ARGUMENTS ("const godot_transform2d *" "p_self")))
   ((:NAME . "godot_transform2d_inverse") (:RETURN--TYPE . "godot_transform2d")
    (:ARGUMENTS ("const godot_transform2d *" "p_self")))
   ((:NAME . "godot_transform2d_affine_inverse")
    (:RETURN--TYPE . "godot_transform2d")
    (:ARGUMENTS ("const godot_transform2d *" "p_self")))
   ((:NAME . "godot_transform2d_get_rotation") (:RETURN--TYPE . "godot_real")
    (:ARGUMENTS ("const godot_transform2d *" "p_self")))
   ((:NAME . "godot_transform2d_get_origin") (:RETURN--TYPE . "godot_vector2")
    (:ARGUMENTS ("const godot_transform2d *" "p_self")))
   ((:NAME . "godot_transform2d_get_scale") (:RETURN--TYPE . "godot_vector2")
    (:ARGUMENTS ("const godot_transform2d *" "p_self")))
   ((:NAME . "godot_transform2d_orthonormalized")
    (:RETURN--TYPE . "godot_transform2d")
    (:ARGUMENTS ("const godot_transform2d *" "p_self")))
   ((:NAME . "godot_transform2d_rotated") (:RETURN--TYPE . "godot_transform2d")
    (:ARGUMENTS ("const godot_transform2d *" "p_self")
     ("const godot_real" "p_phi")))
   ((:NAME . "godot_transform2d_scaled") (:RETURN--TYPE . "godot_transform2d")
    (:ARGUMENTS ("const godot_transform2d *" "p_self")
     ("const godot_vector2 *" "p_scale")))
   ((:NAME . "godot_transform2d_translated")
    (:RETURN--TYPE . "godot_transform2d")
    (:ARGUMENTS ("const godot_transform2d *" "p_self")
     ("const godot_vector2 *" "p_offset")))
   ((:NAME . "godot_transform2d_xform_vector2")
    (:RETURN--TYPE . "godot_vector2")
    (:ARGUMENTS ("const godot_transform2d *" "p_self")
     ("const godot_vector2 *" "p_v")))
   ((:NAME . "godot_transform2d_xform_inv_vector2")
    (:RETURN--TYPE . "godot_vector2")
    (:ARGUMENTS ("const godot_transform2d *" "p_self")
     ("const godot_vector2 *" "p_v")))
   ((:NAME . "godot_transform2d_basis_xform_vector2")
    (:RETURN--TYPE . "godot_vector2")
    (:ARGUMENTS ("const godot_transform2d *" "p_self")
     ("const godot_vector2 *" "p_v")))
   ((:NAME . "godot_transform2d_basis_xform_inv_vector2")
    (:RETURN--TYPE . "godot_vector2")
    (:ARGUMENTS ("const godot_transform2d *" "p_self")
     ("const godot_vector2 *" "p_v")))
   ((:NAME . "godot_transform2d_interpolate_with")
    (:RETURN--TYPE . "godot_transform2d")
    (:ARGUMENTS ("const godot_transform2d *" "p_self")
     ("const godot_transform2d *" "p_m") ("const godot_real" "p_c")))
   ((:NAME . "godot_transform2d_operator_equal") (:RETURN--TYPE . "godot_bool")
    (:ARGUMENTS ("const godot_transform2d *" "p_self")
     ("const godot_transform2d *" "p_b")))
   ((:NAME . "godot_transform2d_operator_multiply")
    (:RETURN--TYPE . "godot_transform2d")
    (:ARGUMENTS ("const godot_transform2d *" "p_self")
     ("const godot_transform2d *" "p_b")))
   ((:NAME . "godot_transform2d_new_identity") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_transform2d *" "r_dest")))
   ((:NAME . "godot_transform2d_xform_rect2") (:RETURN--TYPE . "godot_rect2")
    (:ARGUMENTS ("const godot_transform2d *" "p_self")
     ("const godot_rect2 *" "p_v")))
   ((:NAME . "godot_transform2d_xform_inv_rect2")
    (:RETURN--TYPE . "godot_rect2")
    (:ARGUMENTS ("const godot_transform2d *" "p_self")
     ("const godot_rect2 *" "p_v")))
   ((:NAME . "godot_variant_get_type") (:RETURN--TYPE . "godot_variant_type")
    (:ARGUMENTS ("const godot_variant *" "p_v")))
   ((:NAME . "godot_variant_new_copy") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_variant *" "r_dest")
     ("const godot_variant *" "p_src")))
   ((:NAME . "godot_variant_new_nil") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_variant *" "r_dest")))
   ((:NAME . "godot_variant_new_bool") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_variant *" "r_dest") ("const godot_bool" "p_b")))
   ((:NAME . "godot_variant_new_uint") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_variant *" "r_dest") ("const uint64_t" "p_i")))
   ((:NAME . "godot_variant_new_int") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_variant *" "r_dest") ("const int64_t" "p_i")))
   ((:NAME . "godot_variant_new_real") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_variant *" "r_dest") ("const double" "p_r")))
   ((:NAME . "godot_variant_new_string") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_variant *" "r_dest") ("const godot_string *" "p_s")))
   ((:NAME . "godot_variant_new_vector2") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_variant *" "r_dest") ("const godot_vector2 *" "p_v2")))
   ((:NAME . "godot_variant_new_rect2") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_variant *" "r_dest")
     ("const godot_rect2 *" "p_rect2")))
   ((:NAME . "godot_variant_new_vector3") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_variant *" "r_dest") ("const godot_vector3 *" "p_v3")))
   ((:NAME . "godot_variant_new_transform2d") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_variant *" "r_dest")
     ("const godot_transform2d *" "p_t2d")))
   ((:NAME . "godot_variant_new_plane") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_variant *" "r_dest")
     ("const godot_plane *" "p_plane")))
   ((:NAME . "godot_variant_new_quat") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_variant *" "r_dest") ("const godot_quat *" "p_quat")))
   ((:NAME . "godot_variant_new_aabb") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_variant *" "r_dest") ("const godot_aabb *" "p_aabb")))
   ((:NAME . "godot_variant_new_basis") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_variant *" "r_dest")
     ("const godot_basis *" "p_basis")))
   ((:NAME . "godot_variant_new_transform") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_variant *" "r_dest")
     ("const godot_transform *" "p_trans")))
   ((:NAME . "godot_variant_new_color") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_variant *" "r_dest")
     ("const godot_color *" "p_color")))
   ((:NAME . "godot_variant_new_node_path") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_variant *" "r_dest")
     ("const godot_node_path *" "p_np")))
   ((:NAME . "godot_variant_new_rid") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_variant *" "r_dest") ("const godot_rid *" "p_rid")))
   ((:NAME . "godot_variant_new_object") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_variant *" "r_dest") ("const godot_object *" "p_obj")))
   ((:NAME . "godot_variant_new_dictionary") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_variant *" "r_dest")
     ("const godot_dictionary *" "p_dict")))
   ((:NAME . "godot_variant_new_array") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_variant *" "r_dest") ("const godot_array *" "p_arr")))
   ((:NAME . "godot_variant_new_pool_byte_array") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_variant *" "r_dest")
     ("const godot_pool_byte_array *" "p_pba")))
   ((:NAME . "godot_variant_new_pool_int_array") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_variant *" "r_dest")
     ("const godot_pool_int_array *" "p_pia")))
   ((:NAME . "godot_variant_new_pool_real_array") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_variant *" "r_dest")
     ("const godot_pool_real_array *" "p_pra")))
   ((:NAME . "godot_variant_new_pool_string_array") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_variant *" "r_dest")
     ("const godot_pool_string_array *" "p_psa")))
   ((:NAME . "godot_variant_new_pool_vector2_array") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_variant *" "r_dest")
     ("const godot_pool_vector2_array *" "p_pv2a")))
   ((:NAME . "godot_variant_new_pool_vector3_array") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_variant *" "r_dest")
     ("const godot_pool_vector3_array *" "p_pv3a")))
   ((:NAME . "godot_variant_new_pool_color_array") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_variant *" "r_dest")
     ("const godot_pool_color_array *" "p_pca")))
   ((:NAME . "godot_variant_as_bool") (:RETURN--TYPE . "godot_bool")
    (:ARGUMENTS ("const godot_variant *" "p_self")))
   ((:NAME . "godot_variant_as_uint") (:RETURN--TYPE . "uint64_t")
    (:ARGUMENTS ("const godot_variant *" "p_self")))
   ((:NAME . "godot_variant_as_int") (:RETURN--TYPE . "int64_t")
    (:ARGUMENTS ("const godot_variant *" "p_self")))
   ((:NAME . "godot_variant_as_real") (:RETURN--TYPE . "double")
    (:ARGUMENTS ("const godot_variant *" "p_self")))
   ((:NAME . "godot_variant_as_string") (:RETURN--TYPE . "godot_string")
    (:ARGUMENTS ("const godot_variant *" "p_self")))
   ((:NAME . "godot_variant_as_vector2") (:RETURN--TYPE . "godot_vector2")
    (:ARGUMENTS ("const godot_variant *" "p_self")))
   ((:NAME . "godot_variant_as_rect2") (:RETURN--TYPE . "godot_rect2")
    (:ARGUMENTS ("const godot_variant *" "p_self")))
   ((:NAME . "godot_variant_as_vector3") (:RETURN--TYPE . "godot_vector3")
    (:ARGUMENTS ("const godot_variant *" "p_self")))
   ((:NAME . "godot_variant_as_transform2d")
    (:RETURN--TYPE . "godot_transform2d")
    (:ARGUMENTS ("const godot_variant *" "p_self")))
   ((:NAME . "godot_variant_as_plane") (:RETURN--TYPE . "godot_plane")
    (:ARGUMENTS ("const godot_variant *" "p_self")))
   ((:NAME . "godot_variant_as_quat") (:RETURN--TYPE . "godot_quat")
    (:ARGUMENTS ("const godot_variant *" "p_self")))
   ((:NAME . "godot_variant_as_aabb") (:RETURN--TYPE . "godot_aabb")
    (:ARGUMENTS ("const godot_variant *" "p_self")))
   ((:NAME . "godot_variant_as_basis") (:RETURN--TYPE . "godot_basis")
    (:ARGUMENTS ("const godot_variant *" "p_self")))
   ((:NAME . "godot_variant_as_transform") (:RETURN--TYPE . "godot_transform")
    (:ARGUMENTS ("const godot_variant *" "p_self")))
   ((:NAME . "godot_variant_as_color") (:RETURN--TYPE . "godot_color")
    (:ARGUMENTS ("const godot_variant *" "p_self")))
   ((:NAME . "godot_variant_as_node_path") (:RETURN--TYPE . "godot_node_path")
    (:ARGUMENTS ("const godot_variant *" "p_self")))
   ((:NAME . "godot_variant_as_rid") (:RETURN--TYPE . "godot_rid")
    (:ARGUMENTS ("const godot_variant *" "p_self")))
   ((:NAME . "godot_variant_as_object") (:RETURN--TYPE . "godot_object *")
    (:ARGUMENTS ("const godot_variant *" "p_self")))
   ((:NAME . "godot_variant_as_dictionary")
    (:RETURN--TYPE . "godot_dictionary")
    (:ARGUMENTS ("const godot_variant *" "p_self")))
   ((:NAME . "godot_variant_as_array") (:RETURN--TYPE . "godot_array")
    (:ARGUMENTS ("const godot_variant *" "p_self")))
   ((:NAME . "godot_variant_as_pool_byte_array")
    (:RETURN--TYPE . "godot_pool_byte_array")
    (:ARGUMENTS ("const godot_variant *" "p_self")))
   ((:NAME . "godot_variant_as_pool_int_array")
    (:RETURN--TYPE . "godot_pool_int_array")
    (:ARGUMENTS ("const godot_variant *" "p_self")))
   ((:NAME . "godot_variant_as_pool_real_array")
    (:RETURN--TYPE . "godot_pool_real_array")
    (:ARGUMENTS ("const godot_variant *" "p_self")))
   ((:NAME . "godot_variant_as_pool_string_array")
    (:RETURN--TYPE . "godot_pool_string_array")
    (:ARGUMENTS ("const godot_variant *" "p_self")))
   ((:NAME . "godot_variant_as_pool_vector2_array")
    (:RETURN--TYPE . "godot_pool_vector2_array")
    (:ARGUMENTS ("const godot_variant *" "p_self")))
   ((:NAME . "godot_variant_as_pool_vector3_array")
    (:RETURN--TYPE . "godot_pool_vector3_array")
    (:ARGUMENTS ("const godot_variant *" "p_self")))
   ((:NAME . "godot_variant_as_pool_color_array")
    (:RETURN--TYPE . "godot_pool_color_array")
    (:ARGUMENTS ("const godot_variant *" "p_self")))
   ((:NAME . "godot_variant_call") (:RETURN--TYPE . "godot_variant")
    (:ARGUMENTS ("godot_variant *" "p_self")
     ("const godot_string *" "p_method") ("const godot_variant **" "p_args")
     ("const godot_int" "p_argcount")
     ("godot_variant_call_error *" "r_error")))
   ((:NAME . "godot_variant_has_method") (:RETURN--TYPE . "godot_bool")
    (:ARGUMENTS ("const godot_variant *" "p_self")
     ("const godot_string *" "p_method")))
   ((:NAME . "godot_variant_operator_equal") (:RETURN--TYPE . "godot_bool")
    (:ARGUMENTS ("const godot_variant *" "p_self")
     ("const godot_variant *" "p_other")))
   ((:NAME . "godot_variant_operator_less") (:RETURN--TYPE . "godot_bool")
    (:ARGUMENTS ("const godot_variant *" "p_self")
     ("const godot_variant *" "p_other")))
   ((:NAME . "godot_variant_hash_compare") (:RETURN--TYPE . "godot_bool")
    (:ARGUMENTS ("const godot_variant *" "p_self")
     ("const godot_variant *" "p_other")))
   ((:NAME . "godot_variant_booleanize") (:RETURN--TYPE . "godot_bool")
    (:ARGUMENTS ("const godot_variant *" "p_self")))
   ((:NAME . "godot_variant_destroy") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_variant *" "p_self")))
   ((:NAME . "godot_char_string_length") (:RETURN--TYPE . "godot_int")
    (:ARGUMENTS ("const godot_char_string *" "p_cs")))
   ((:NAME . "godot_char_string_get_data") (:RETURN--TYPE . "const char *")
    (:ARGUMENTS ("const godot_char_string *" "p_cs")))
   ((:NAME . "godot_char_string_destroy") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_char_string *" "p_cs")))
   ((:NAME . "godot_string_new") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_string *" "r_dest")))
   ((:NAME . "godot_string_new_copy") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_string *" "r_dest") ("const godot_string *" "p_src")))
   ((:NAME . "godot_string_new_with_wide_string") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_string *" "r_dest") ("const wchar_t *" "p_contents")
     ("const int" "p_size")))
   ((:NAME . "godot_string_operator_index") (:RETURN--TYPE . "const wchar_t *")
    (:ARGUMENTS ("godot_string *" "p_self") ("const godot_int" "p_idx")))
   ((:NAME . "godot_string_operator_index_const") (:RETURN--TYPE . "wchar_t")
    (:ARGUMENTS ("const godot_string *" "p_self") ("const godot_int" "p_idx")))
   ((:NAME . "godot_string_wide_str") (:RETURN--TYPE . "const wchar_t *")
    (:ARGUMENTS ("const godot_string *" "p_self")))
   ((:NAME . "godot_string_operator_equal") (:RETURN--TYPE . "godot_bool")
    (:ARGUMENTS ("const godot_string *" "p_self")
     ("const godot_string *" "p_b")))
   ((:NAME . "godot_string_operator_less") (:RETURN--TYPE . "godot_bool")
    (:ARGUMENTS ("const godot_string *" "p_self")
     ("const godot_string *" "p_b")))
   ((:NAME . "godot_string_operator_plus") (:RETURN--TYPE . "godot_string")
    (:ARGUMENTS ("const godot_string *" "p_self")
     ("const godot_string *" "p_b")))
   ((:NAME . "godot_string_length") (:RETURN--TYPE . "godot_int")
    (:ARGUMENTS ("const godot_string *" "p_self")))
   ((:NAME . "godot_string_casecmp_to") (:RETURN--TYPE . "signed char")
    (:ARGUMENTS ("const godot_string *" "p_self")
     ("const godot_string *" "p_str")))
   ((:NAME . "godot_string_nocasecmp_to") (:RETURN--TYPE . "signed char")
    (:ARGUMENTS ("const godot_string *" "p_self")
     ("const godot_string *" "p_str")))
   ((:NAME . "godot_string_naturalnocasecmp_to")
    (:RETURN--TYPE . "signed char")
    (:ARGUMENTS ("const godot_string *" "p_self")
     ("const godot_string *" "p_str")))
   ((:NAME . "godot_string_begins_with") (:RETURN--TYPE . "godot_bool")
    (:ARGUMENTS ("const godot_string *" "p_self")
     ("const godot_string *" "p_string")))
   ((:NAME . "godot_string_begins_with_char_array")
    (:RETURN--TYPE . "godot_bool")
    (:ARGUMENTS ("const godot_string *" "p_self")
     ("const char *" "p_char_array")))
   ((:NAME . "godot_string_bigrams") (:RETURN--TYPE . "godot_array")
    (:ARGUMENTS ("const godot_string *" "p_self")))
   ((:NAME . "godot_string_chr") (:RETURN--TYPE . "godot_string")
    (:ARGUMENTS ("wchar_t" "p_character")))
   ((:NAME . "godot_string_ends_with") (:RETURN--TYPE . "godot_bool")
    (:ARGUMENTS ("const godot_string *" "p_self")
     ("const godot_string *" "p_string")))
   ((:NAME . "godot_string_find") (:RETURN--TYPE . "godot_int")
    (:ARGUMENTS ("const godot_string *" "p_self") ("godot_string" "p_what")))
   ((:NAME . "godot_string_find_from") (:RETURN--TYPE . "godot_int")
    (:ARGUMENTS ("const godot_string *" "p_self") ("godot_string" "p_what")
     ("godot_int" "p_from")))
   ((:NAME . "godot_string_findmk") (:RETURN--TYPE . "godot_int")
    (:ARGUMENTS ("const godot_string *" "p_self")
     ("const godot_array *" "p_keys")))
   ((:NAME . "godot_string_findmk_from") (:RETURN--TYPE . "godot_int")
    (:ARGUMENTS ("const godot_string *" "p_self")
     ("const godot_array *" "p_keys") ("godot_int" "p_from")))
   ((:NAME . "godot_string_findmk_from_in_place") (:RETURN--TYPE . "godot_int")
    (:ARGUMENTS ("const godot_string *" "p_self")
     ("const godot_array *" "p_keys") ("godot_int" "p_from")
     ("godot_int *" "r_key")))
   ((:NAME . "godot_string_findn") (:RETURN--TYPE . "godot_int")
    (:ARGUMENTS ("const godot_string *" "p_self") ("godot_string" "p_what")))
   ((:NAME . "godot_string_findn_from") (:RETURN--TYPE . "godot_int")
    (:ARGUMENTS ("const godot_string *" "p_self") ("godot_string" "p_what")
     ("godot_int" "p_from")))
   ((:NAME . "godot_string_find_last") (:RETURN--TYPE . "godot_int")
    (:ARGUMENTS ("const godot_string *" "p_self") ("godot_string" "p_what")))
   ((:NAME . "godot_string_format") (:RETURN--TYPE . "godot_string")
    (:ARGUMENTS ("const godot_string *" "p_self")
     ("const godot_variant *" "p_values")))
   ((:NAME . "godot_string_format_with_custom_placeholder")
    (:RETURN--TYPE . "godot_string")
    (:ARGUMENTS ("const godot_string *" "p_self")
     ("const godot_variant *" "p_values") ("const char *" "p_placeholder")))
   ((:NAME . "godot_string_hex_encode_buffer") (:RETURN--TYPE . "godot_string")
    (:ARGUMENTS ("const uint8_t *" "p_buffer") ("godot_int" "p_len")))
   ((:NAME . "godot_string_hex_to_int") (:RETURN--TYPE . "godot_int")
    (:ARGUMENTS ("const godot_string *" "p_self")))
   ((:NAME . "godot_string_hex_to_int_without_prefix")
    (:RETURN--TYPE . "godot_int")
    (:ARGUMENTS ("const godot_string *" "p_self")))
   ((:NAME . "godot_string_insert") (:RETURN--TYPE . "godot_string")
    (:ARGUMENTS ("const godot_string *" "p_self") ("godot_int" "p_at_pos")
     ("godot_string" "p_string")))
   ((:NAME . "godot_string_is_numeric") (:RETURN--TYPE . "godot_bool")
    (:ARGUMENTS ("const godot_string *" "p_self")))
   ((:NAME . "godot_string_is_subsequence_of") (:RETURN--TYPE . "godot_bool")
    (:ARGUMENTS ("const godot_string *" "p_self")
     ("const godot_string *" "p_string")))
   ((:NAME . "godot_string_is_subsequence_ofi") (:RETURN--TYPE . "godot_bool")
    (:ARGUMENTS ("const godot_string *" "p_self")
     ("const godot_string *" "p_string")))
   ((:NAME . "godot_string_lpad") (:RETURN--TYPE . "godot_string")
    (:ARGUMENTS ("const godot_string *" "p_self")
     ("godot_int" "p_min_length")))
   ((:NAME . "godot_string_lpad_with_custom_character")
    (:RETURN--TYPE . "godot_string")
    (:ARGUMENTS ("const godot_string *" "p_self") ("godot_int" "p_min_length")
     ("const godot_string *" "p_character")))
   ((:NAME . "godot_string_match") (:RETURN--TYPE . "godot_bool")
    (:ARGUMENTS ("const godot_string *" "p_self")
     ("const godot_string *" "p_wildcard")))
   ((:NAME . "godot_string_matchn") (:RETURN--TYPE . "godot_bool")
    (:ARGUMENTS ("const godot_string *" "p_self")
     ("const godot_string *" "p_wildcard")))
   ((:NAME . "godot_string_md5") (:RETURN--TYPE . "godot_string")
    (:ARGUMENTS ("const uint8_t *" "p_md5")))
   ((:NAME . "godot_string_num") (:RETURN--TYPE . "godot_string")
    (:ARGUMENTS ("double" "p_num")))
   ((:NAME . "godot_string_num_int64") (:RETURN--TYPE . "godot_string")
    (:ARGUMENTS ("int64_t" "p_num") ("godot_int" "p_base")))
   ((:NAME . "godot_string_num_int64_capitalized")
    (:RETURN--TYPE . "godot_string")
    (:ARGUMENTS ("int64_t" "p_num") ("godot_int" "p_base")
     ("godot_bool" "p_capitalize_hex")))
   ((:NAME . "godot_string_num_real") (:RETURN--TYPE . "godot_string")
    (:ARGUMENTS ("double" "p_num")))
   ((:NAME . "godot_string_num_scientific") (:RETURN--TYPE . "godot_string")
    (:ARGUMENTS ("double" "p_num")))
   ((:NAME . "godot_string_num_with_decimals") (:RETURN--TYPE . "godot_string")
    (:ARGUMENTS ("double" "p_num") ("godot_int" "p_decimals")))
   ((:NAME . "godot_string_pad_decimals") (:RETURN--TYPE . "godot_string")
    (:ARGUMENTS ("const godot_string *" "p_self") ("godot_int" "p_digits")))
   ((:NAME . "godot_string_pad_zeros") (:RETURN--TYPE . "godot_string")
    (:ARGUMENTS ("const godot_string *" "p_self") ("godot_int" "p_digits")))
   ((:NAME . "godot_string_replace_first") (:RETURN--TYPE . "godot_string")
    (:ARGUMENTS ("const godot_string *" "p_self") ("godot_string" "p_key")
     ("godot_string" "p_with")))
   ((:NAME . "godot_string_replace") (:RETURN--TYPE . "godot_string")
    (:ARGUMENTS ("const godot_string *" "p_self") ("godot_string" "p_key")
     ("godot_string" "p_with")))
   ((:NAME . "godot_string_replacen") (:RETURN--TYPE . "godot_string")
    (:ARGUMENTS ("const godot_string *" "p_self") ("godot_string" "p_key")
     ("godot_string" "p_with")))
   ((:NAME . "godot_string_rfind") (:RETURN--TYPE . "godot_int")
    (:ARGUMENTS ("const godot_string *" "p_self") ("godot_string" "p_what")))
   ((:NAME . "godot_string_rfindn") (:RETURN--TYPE . "godot_int")
    (:ARGUMENTS ("const godot_string *" "p_self") ("godot_string" "p_what")))
   ((:NAME . "godot_string_rfind_from") (:RETURN--TYPE . "godot_int")
    (:ARGUMENTS ("const godot_string *" "p_self") ("godot_string" "p_what")
     ("godot_int" "p_from")))
   ((:NAME . "godot_string_rfindn_from") (:RETURN--TYPE . "godot_int")
    (:ARGUMENTS ("const godot_string *" "p_self") ("godot_string" "p_what")
     ("godot_int" "p_from")))
   ((:NAME . "godot_string_rpad") (:RETURN--TYPE . "godot_string")
    (:ARGUMENTS ("const godot_string *" "p_self")
     ("godot_int" "p_min_length")))
   ((:NAME . "godot_string_rpad_with_custom_character")
    (:RETURN--TYPE . "godot_string")
    (:ARGUMENTS ("const godot_string *" "p_self") ("godot_int" "p_min_length")
     ("const godot_string *" "p_character")))
   ((:NAME . "godot_string_similarity") (:RETURN--TYPE . "godot_real")
    (:ARGUMENTS ("const godot_string *" "p_self")
     ("const godot_string *" "p_string")))
   ((:NAME . "godot_string_sprintf") (:RETURN--TYPE . "godot_string")
    (:ARGUMENTS ("const godot_string *" "p_self")
     ("const godot_array *" "p_values") ("godot_bool *" "p_error")))
   ((:NAME . "godot_string_substr") (:RETURN--TYPE . "godot_string")
    (:ARGUMENTS ("const godot_string *" "p_self") ("godot_int" "p_from")
     ("godot_int" "p_chars")))
   ((:NAME . "godot_string_to_double") (:RETURN--TYPE . "double")
    (:ARGUMENTS ("const godot_string *" "p_self")))
   ((:NAME . "godot_string_to_float") (:RETURN--TYPE . "godot_real")
    (:ARGUMENTS ("const godot_string *" "p_self")))
   ((:NAME . "godot_string_to_int") (:RETURN--TYPE . "godot_int")
    (:ARGUMENTS ("const godot_string *" "p_self")))
   ((:NAME . "godot_string_camelcase_to_underscore")
    (:RETURN--TYPE . "godot_string")
    (:ARGUMENTS ("const godot_string *" "p_self")))
   ((:NAME . "godot_string_camelcase_to_underscore_lowercased")
    (:RETURN--TYPE . "godot_string")
    (:ARGUMENTS ("const godot_string *" "p_self")))
   ((:NAME . "godot_string_capitalize") (:RETURN--TYPE . "godot_string")
    (:ARGUMENTS ("const godot_string *" "p_self")))
   ((:NAME . "godot_string_char_to_double") (:RETURN--TYPE . "double")
    (:ARGUMENTS ("const char *" "p_what")))
   ((:NAME . "godot_string_char_to_int") (:RETURN--TYPE . "godot_int")
    (:ARGUMENTS ("const char *" "p_what")))
   ((:NAME . "godot_string_wchar_to_int") (:RETURN--TYPE . "int64_t")
    (:ARGUMENTS ("const wchar_t *" "p_str")))
   ((:NAME . "godot_string_char_to_int_with_len") (:RETURN--TYPE . "godot_int")
    (:ARGUMENTS ("const char *" "p_what") ("godot_int" "p_len")))
   ((:NAME . "godot_string_char_to_int64_with_len") (:RETURN--TYPE . "int64_t")
    (:ARGUMENTS ("const wchar_t *" "p_str") ("int" "p_len")))
   ((:NAME . "godot_string_hex_to_int64") (:RETURN--TYPE . "int64_t")
    (:ARGUMENTS ("const godot_string *" "p_self")))
   ((:NAME . "godot_string_hex_to_int64_with_prefix")
    (:RETURN--TYPE . "int64_t") (:ARGUMENTS ("const godot_string *" "p_self")))
   ((:NAME . "godot_string_to_int64") (:RETURN--TYPE . "int64_t")
    (:ARGUMENTS ("const godot_string *" "p_self")))
   ((:NAME . "godot_string_unicode_char_to_double") (:RETURN--TYPE . "double")
    (:ARGUMENTS ("const wchar_t *" "p_str") ("const wchar_t **" "r_end")))
   ((:NAME . "godot_string_get_slice_count") (:RETURN--TYPE . "godot_int")
    (:ARGUMENTS ("const godot_string *" "p_self")
     ("godot_string" "p_splitter")))
   ((:NAME . "godot_string_get_slice") (:RETURN--TYPE . "godot_string")
    (:ARGUMENTS ("const godot_string *" "p_self") ("godot_string" "p_splitter")
     ("godot_int" "p_slice")))
   ((:NAME . "godot_string_get_slicec") (:RETURN--TYPE . "godot_string")
    (:ARGUMENTS ("const godot_string *" "p_self") ("wchar_t" "p_splitter")
     ("godot_int" "p_slice")))
   ((:NAME . "godot_string_split") (:RETURN--TYPE . "godot_array")
    (:ARGUMENTS ("const godot_string *" "p_self")
     ("const godot_string *" "p_splitter")))
   ((:NAME . "godot_string_split_allow_empty") (:RETURN--TYPE . "godot_array")
    (:ARGUMENTS ("const godot_string *" "p_self")
     ("const godot_string *" "p_splitter")))
   ((:NAME . "godot_string_split_floats") (:RETURN--TYPE . "godot_array")
    (:ARGUMENTS ("const godot_string *" "p_self")
     ("const godot_string *" "p_splitter")))
   ((:NAME . "godot_string_split_floats_allows_empty")
    (:RETURN--TYPE . "godot_array")
    (:ARGUMENTS ("const godot_string *" "p_self")
     ("const godot_string *" "p_splitter")))
   ((:NAME . "godot_string_split_floats_mk") (:RETURN--TYPE . "godot_array")
    (:ARGUMENTS ("const godot_string *" "p_self")
     ("const godot_array *" "p_splitters")))
   ((:NAME . "godot_string_split_floats_mk_allows_empty")
    (:RETURN--TYPE . "godot_array")
    (:ARGUMENTS ("const godot_string *" "p_self")
     ("const godot_array *" "p_splitters")))
   ((:NAME . "godot_string_split_ints") (:RETURN--TYPE . "godot_array")
    (:ARGUMENTS ("const godot_string *" "p_self")
     ("const godot_string *" "p_splitter")))
   ((:NAME . "godot_string_split_ints_allows_empty")
    (:RETURN--TYPE . "godot_array")
    (:ARGUMENTS ("const godot_string *" "p_self")
     ("const godot_string *" "p_splitter")))
   ((:NAME . "godot_string_split_ints_mk") (:RETURN--TYPE . "godot_array")
    (:ARGUMENTS ("const godot_string *" "p_self")
     ("const godot_array *" "p_splitters")))
   ((:NAME . "godot_string_split_ints_mk_allows_empty")
    (:RETURN--TYPE . "godot_array")
    (:ARGUMENTS ("const godot_string *" "p_self")
     ("const godot_array *" "p_splitters")))
   ((:NAME . "godot_string_split_spaces") (:RETURN--TYPE . "godot_array")
    (:ARGUMENTS ("const godot_string *" "p_self")))
   ((:NAME . "godot_string_char_lowercase") (:RETURN--TYPE . "wchar_t")
    (:ARGUMENTS ("wchar_t" "p_char")))
   ((:NAME . "godot_string_char_uppercase") (:RETURN--TYPE . "wchar_t")
    (:ARGUMENTS ("wchar_t" "p_char")))
   ((:NAME . "godot_string_to_lower") (:RETURN--TYPE . "godot_string")
    (:ARGUMENTS ("const godot_string *" "p_self")))
   ((:NAME . "godot_string_to_upper") (:RETURN--TYPE . "godot_string")
    (:ARGUMENTS ("const godot_string *" "p_self")))
   ((:NAME . "godot_string_get_basename") (:RETURN--TYPE . "godot_string")
    (:ARGUMENTS ("const godot_string *" "p_self")))
   ((:NAME . "godot_string_get_extension") (:RETURN--TYPE . "godot_string")
    (:ARGUMENTS ("const godot_string *" "p_self")))
   ((:NAME . "godot_string_left") (:RETURN--TYPE . "godot_string")
    (:ARGUMENTS ("const godot_string *" "p_self") ("godot_int" "p_pos")))
   ((:NAME . "godot_string_ord_at") (:RETURN--TYPE . "wchar_t")
    (:ARGUMENTS ("const godot_string *" "p_self") ("godot_int" "p_idx")))
   ((:NAME . "godot_string_plus_file") (:RETURN--TYPE . "godot_string")
    (:ARGUMENTS ("const godot_string *" "p_self")
     ("const godot_string *" "p_file")))
   ((:NAME . "godot_string_right") (:RETURN--TYPE . "godot_string")
    (:ARGUMENTS ("const godot_string *" "p_self") ("godot_int" "p_pos")))
   ((:NAME . "godot_string_strip_edges") (:RETURN--TYPE . "godot_string")
    (:ARGUMENTS ("const godot_string *" "p_self") ("godot_bool" "p_left")
     ("godot_bool" "p_right")))
   ((:NAME . "godot_string_strip_escapes") (:RETURN--TYPE . "godot_string")
    (:ARGUMENTS ("const godot_string *" "p_self")))
   ((:NAME . "godot_string_erase") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_string *" "p_self") ("godot_int" "p_pos")
     ("godot_int" "p_chars")))
   ((:NAME . "godot_string_ascii") (:RETURN--TYPE . "godot_char_string")
    (:ARGUMENTS ("const godot_string *" "p_self")))
   ((:NAME . "godot_string_ascii_extended")
    (:RETURN--TYPE . "godot_char_string")
    (:ARGUMENTS ("const godot_string *" "p_self")))
   ((:NAME . "godot_string_utf8") (:RETURN--TYPE . "godot_char_string")
    (:ARGUMENTS ("const godot_string *" "p_self")))
   ((:NAME . "godot_string_parse_utf8") (:RETURN--TYPE . "godot_bool")
    (:ARGUMENTS ("godot_string *" "p_self") ("const char *" "p_utf8")))
   ((:NAME . "godot_string_parse_utf8_with_len") (:RETURN--TYPE . "godot_bool")
    (:ARGUMENTS ("godot_string *" "p_self") ("const char *" "p_utf8")
     ("godot_int" "p_len")))
   ((:NAME . "godot_string_chars_to_utf8") (:RETURN--TYPE . "godot_string")
    (:ARGUMENTS ("const char *" "p_utf8")))
   ((:NAME . "godot_string_chars_to_utf8_with_len")
    (:RETURN--TYPE . "godot_string")
    (:ARGUMENTS ("const char *" "p_utf8") ("godot_int" "p_len")))
   ((:NAME . "godot_string_hash") (:RETURN--TYPE . "uint32_t")
    (:ARGUMENTS ("const godot_string *" "p_self")))
   ((:NAME . "godot_string_hash64") (:RETURN--TYPE . "uint64_t")
    (:ARGUMENTS ("const godot_string *" "p_self")))
   ((:NAME . "godot_string_hash_chars") (:RETURN--TYPE . "uint32_t")
    (:ARGUMENTS ("const char *" "p_cstr")))
   ((:NAME . "godot_string_hash_chars_with_len") (:RETURN--TYPE . "uint32_t")
    (:ARGUMENTS ("const char *" "p_cstr") ("godot_int" "p_len")))
   ((:NAME . "godot_string_hash_utf8_chars") (:RETURN--TYPE . "uint32_t")
    (:ARGUMENTS ("const wchar_t *" "p_str")))
   ((:NAME . "godot_string_hash_utf8_chars_with_len")
    (:RETURN--TYPE . "uint32_t")
    (:ARGUMENTS ("const wchar_t *" "p_str") ("godot_int" "p_len")))
   ((:NAME . "godot_string_md5_buffer")
    (:RETURN--TYPE . "godot_pool_byte_array")
    (:ARGUMENTS ("const godot_string *" "p_self")))
   ((:NAME . "godot_string_md5_text") (:RETURN--TYPE . "godot_string")
    (:ARGUMENTS ("const godot_string *" "p_self")))
   ((:NAME . "godot_string_sha256_buffer")
    (:RETURN--TYPE . "godot_pool_byte_array")
    (:ARGUMENTS ("const godot_string *" "p_self")))
   ((:NAME . "godot_string_sha256_text") (:RETURN--TYPE . "godot_string")
    (:ARGUMENTS ("const godot_string *" "p_self")))
   ((:NAME . "godot_string_empty") (:RETURN--TYPE . "godot_bool")
    (:ARGUMENTS ("const godot_string *" "p_self")))
   ((:NAME . "godot_string_get_base_dir") (:RETURN--TYPE . "godot_string")
    (:ARGUMENTS ("const godot_string *" "p_self")))
   ((:NAME . "godot_string_get_file") (:RETURN--TYPE . "godot_string")
    (:ARGUMENTS ("const godot_string *" "p_self")))
   ((:NAME . "godot_string_humanize_size") (:RETURN--TYPE . "godot_string")
    (:ARGUMENTS ("size_t" "p_size")))
   ((:NAME . "godot_string_is_abs_path") (:RETURN--TYPE . "godot_bool")
    (:ARGUMENTS ("const godot_string *" "p_self")))
   ((:NAME . "godot_string_is_rel_path") (:RETURN--TYPE . "godot_bool")
    (:ARGUMENTS ("const godot_string *" "p_self")))
   ((:NAME . "godot_string_is_resource_file") (:RETURN--TYPE . "godot_bool")
    (:ARGUMENTS ("const godot_string *" "p_self")))
   ((:NAME . "godot_string_path_to") (:RETURN--TYPE . "godot_string")
    (:ARGUMENTS ("const godot_string *" "p_self")
     ("const godot_string *" "p_path")))
   ((:NAME . "godot_string_path_to_file") (:RETURN--TYPE . "godot_string")
    (:ARGUMENTS ("const godot_string *" "p_self")
     ("const godot_string *" "p_path")))
   ((:NAME . "godot_string_simplify_path") (:RETURN--TYPE . "godot_string")
    (:ARGUMENTS ("const godot_string *" "p_self")))
   ((:NAME . "godot_string_c_escape") (:RETURN--TYPE . "godot_string")
    (:ARGUMENTS ("const godot_string *" "p_self")))
   ((:NAME . "godot_string_c_escape_multiline")
    (:RETURN--TYPE . "godot_string")
    (:ARGUMENTS ("const godot_string *" "p_self")))
   ((:NAME . "godot_string_c_unescape") (:RETURN--TYPE . "godot_string")
    (:ARGUMENTS ("const godot_string *" "p_self")))
   ((:NAME . "godot_string_http_escape") (:RETURN--TYPE . "godot_string")
    (:ARGUMENTS ("const godot_string *" "p_self")))
   ((:NAME . "godot_string_http_unescape") (:RETURN--TYPE . "godot_string")
    (:ARGUMENTS ("const godot_string *" "p_self")))
   ((:NAME . "godot_string_json_escape") (:RETURN--TYPE . "godot_string")
    (:ARGUMENTS ("const godot_string *" "p_self")))
   ((:NAME . "godot_string_word_wrap") (:RETURN--TYPE . "godot_string")
    (:ARGUMENTS ("const godot_string *" "p_self")
     ("godot_int" "p_chars_per_line")))
   ((:NAME . "godot_string_xml_escape") (:RETURN--TYPE . "godot_string")
    (:ARGUMENTS ("const godot_string *" "p_self")))
   ((:NAME . "godot_string_xml_escape_with_quotes")
    (:RETURN--TYPE . "godot_string")
    (:ARGUMENTS ("const godot_string *" "p_self")))
   ((:NAME . "godot_string_xml_unescape") (:RETURN--TYPE . "godot_string")
    (:ARGUMENTS ("const godot_string *" "p_self")))
   ((:NAME . "godot_string_percent_decode") (:RETURN--TYPE . "godot_string")
    (:ARGUMENTS ("const godot_string *" "p_self")))
   ((:NAME . "godot_string_percent_encode") (:RETURN--TYPE . "godot_string")
    (:ARGUMENTS ("const godot_string *" "p_self")))
   ((:NAME . "godot_string_is_valid_float") (:RETURN--TYPE . "godot_bool")
    (:ARGUMENTS ("const godot_string *" "p_self")))
   ((:NAME . "godot_string_is_valid_hex_number") (:RETURN--TYPE . "godot_bool")
    (:ARGUMENTS ("const godot_string *" "p_self")
     ("godot_bool" "p_with_prefix")))
   ((:NAME . "godot_string_is_valid_html_color") (:RETURN--TYPE . "godot_bool")
    (:ARGUMENTS ("const godot_string *" "p_self")))
   ((:NAME . "godot_string_is_valid_identifier") (:RETURN--TYPE . "godot_bool")
    (:ARGUMENTS ("const godot_string *" "p_self")))
   ((:NAME . "godot_string_is_valid_integer") (:RETURN--TYPE . "godot_bool")
    (:ARGUMENTS ("const godot_string *" "p_self")))
   ((:NAME . "godot_string_is_valid_ip_address") (:RETURN--TYPE . "godot_bool")
    (:ARGUMENTS ("const godot_string *" "p_self")))
   ((:NAME . "godot_string_destroy") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_string *" "p_self")))
   ((:NAME . "godot_string_name_new") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_string_name *" "r_dest")
     ("const godot_string *" "p_name")))
   ((:NAME . "godot_string_name_new_data") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_string_name *" "r_dest") ("const char *" "p_name")))
   ((:NAME . "godot_string_name_get_name") (:RETURN--TYPE . "godot_string")
    (:ARGUMENTS ("const godot_string_name *" "p_self")))
   ((:NAME . "godot_string_name_get_hash") (:RETURN--TYPE . "uint32_t")
    (:ARGUMENTS ("const godot_string_name *" "p_self")))
   ((:NAME . "godot_string_name_get_data_unique_pointer")
    (:RETURN--TYPE . "const void *")
    (:ARGUMENTS ("const godot_string_name *" "p_self")))
   ((:NAME . "godot_string_name_operator_equal") (:RETURN--TYPE . "godot_bool")
    (:ARGUMENTS ("const godot_string_name *" "p_self")
     ("const godot_string_name *" "p_other")))
   ((:NAME . "godot_string_name_operator_less") (:RETURN--TYPE . "godot_bool")
    (:ARGUMENTS ("const godot_string_name *" "p_self")
     ("const godot_string_name *" "p_other")))
   ((:NAME . "godot_string_name_destroy") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_string_name *" "p_self")))
   ((:NAME . "godot_object_destroy") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_object *" "p_o")))
   ((:NAME . "godot_global_get_singleton") (:RETURN--TYPE . "godot_object *")
    (:ARGUMENTS ("char *" "p_name")))
   ((:NAME . "godot_method_bind_get_method")
    (:RETURN--TYPE . "godot_method_bind *")
    (:ARGUMENTS ("const char *" "p_classname")
     ("const char *" "p_methodname")))
   ((:NAME . "godot_method_bind_ptrcall") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("godot_method_bind *" "p_method_bind")
     ("godot_object *" "p_instance") ("const void **" "p_args")
     ("void *" "p_ret")))
   ((:NAME . "godot_method_bind_call") (:RETURN--TYPE . "godot_variant")
    (:ARGUMENTS ("godot_method_bind *" "p_method_bind")
     ("godot_object *" "p_instance") ("const godot_variant **" "p_args")
     ("const int" "p_arg_count")
     ("godot_variant_call_error *" "p_call_error")))
   ((:NAME . "godot_get_class_constructor")
    (:RETURN--TYPE . "godot_class_constructor")
    (:ARGUMENTS ("const char *" "p_classname")))
   ((:NAME . "godot_get_global_constants") (:RETURN--TYPE . "godot_dictionary")
    (:ARGUMENTS))
   ((:NAME . "godot_register_native_call_type") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("const char *" "call_type") ("native_call_cb" "p_callback")))
   ((:NAME . "godot_alloc") (:RETURN--TYPE . "void *")
    (:ARGUMENTS ("int" "p_bytes")))
   ((:NAME . "godot_realloc") (:RETURN--TYPE . "void *")
    (:ARGUMENTS ("void *" "p_ptr") ("int" "p_bytes")))
   ((:NAME . "godot_free") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("void *" "p_ptr")))
   ((:NAME . "godot_print_error") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("const char *" "p_description") ("const char *" "p_function")
     ("const char *" "p_file") ("int" "p_line")))
   ((:NAME . "godot_print_warning") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("const char *" "p_description") ("const char *" "p_function")
     ("const char *" "p_file") ("int" "p_line")))
   ((:NAME . "godot_print") (:RETURN--TYPE . "void")
    (:ARGUMENTS ("const godot_string *" "p_message")))))
 (:EXTENSIONS
  ((:NAME . "nativescript") (:TYPE . "NATIVESCRIPT")
   (:VERSION (:MAJOR . 1) (:MINOR . 0))
   (:NEXT (:TYPE . "NATIVESCRIPT") (:VERSION (:MAJOR . 1) (:MINOR . 1)) (:NEXT)
    (:API
     ((:NAME . "godot_nativescript_set_method_argument_information")
      (:RETURN--TYPE . "void")
      (:ARGUMENTS ("void *" "p_gdnative_handle") ("const char *" "p_name")
       ("const char *" "p_function_name") ("int" "p_num_args")
       ("const godot_method_arg *" "p_args")))
     ((:NAME . "godot_nativescript_set_class_documentation")
      (:RETURN--TYPE . "void")
      (:ARGUMENTS ("void *" "p_gdnative_handle") ("const char *" "p_name")
       ("godot_string" "p_documentation")))
     ((:NAME . "godot_nativescript_set_method_documentation")
      (:RETURN--TYPE . "void")
      (:ARGUMENTS ("void *" "p_gdnative_handle") ("const char *" "p_name")
       ("const char *" "p_function_name") ("godot_string" "p_documentation")))
     ((:NAME . "godot_nativescript_set_property_documentation")
      (:RETURN--TYPE . "void")
      (:ARGUMENTS ("void *" "p_gdnative_handle") ("const char *" "p_name")
       ("const char *" "p_path") ("godot_string" "p_documentation")))
     ((:NAME . "godot_nativescript_set_signal_documentation")
      (:RETURN--TYPE . "void")
      (:ARGUMENTS ("void *" "p_gdnative_handle") ("const char *" "p_name")
       ("const char *" "p_signal_name") ("godot_string" "p_documentation")))
     ((:NAME . "godot_nativescript_set_global_type_tag")
      (:RETURN--TYPE . "void")
      (:ARGUMENTS ("int" "p_idx") ("const char *" "p_name")
       ("const void *" "p_type_tag")))
     ((:NAME . "godot_nativescript_get_global_type_tag")
      (:RETURN--TYPE . "const void *")
      (:ARGUMENTS ("int" "p_idx") ("const char *" "p_name")))
     ((:NAME . "godot_nativescript_set_type_tag") (:RETURN--TYPE . "void")
      (:ARGUMENTS ("void *" "p_gdnative_handle") ("const char *" "p_name")
       ("const void *" "p_type_tag")))
     ((:NAME . "godot_nativescript_get_type_tag")
      (:RETURN--TYPE . "const void *")
      (:ARGUMENTS ("const godot_object *" "p_object")))
     ((:NAME . "godot_nativescript_register_instance_binding_data_functions")
      (:RETURN--TYPE . "int")
      (:ARGUMENTS ("godot_instance_binding_functions" "p_binding_functions")))
     ((:NAME . "godot_nativescript_unregister_instance_binding_data_functions")
      (:RETURN--TYPE . "void") (:ARGUMENTS ("int" "p_idx")))
     ((:NAME . "godot_nativescript_get_instance_binding_data")
      (:RETURN--TYPE . "void *")
      (:ARGUMENTS ("int" "p_idx") ("godot_object *" "p_object")))
     ((:NAME . "godot_nativescript_profiling_add_data")
      (:RETURN--TYPE . "void")
      (:ARGUMENTS ("const char *" "p_signature") ("uint64_t" "p_line")))))
   (:API
    ((:NAME . "godot_nativescript_register_class") (:RETURN--TYPE . "void")
     (:ARGUMENTS ("void *" "p_gdnative_handle") ("const char *" "p_name")
      ("const char *" "p_base") ("godot_instance_create_func" "p_create_func")
      ("godot_instance_destroy_func" "p_destroy_func")))
    ((:NAME . "godot_nativescript_register_tool_class")
     (:RETURN--TYPE . "void")
     (:ARGUMENTS ("void *" "p_gdnative_handle") ("const char *" "p_name")
      ("const char *" "p_base") ("godot_instance_create_func" "p_create_func")
      ("godot_instance_destroy_func" "p_destroy_func")))
    ((:NAME . "godot_nativescript_register_method") (:RETURN--TYPE . "void")
     (:ARGUMENTS ("void *" "p_gdnative_handle") ("const char *" "p_name")
      ("const char *" "p_function_name") ("godot_method_attributes" "p_attr")
      ("godot_instance_method" "p_method")))
    ((:NAME . "godot_nativescript_register_property") (:RETURN--TYPE . "void")
     (:ARGUMENTS ("void *" "p_gdnative_handle") ("const char *" "p_name")
      ("const char *" "p_path") ("godot_property_attributes *" "p_attr")
      ("godot_property_set_func" "p_set_func")
      ("godot_property_get_func" "p_get_func")))
    ((:NAME . "godot_nativescript_register_signal") (:RETURN--TYPE . "void")
     (:ARGUMENTS ("void *" "p_gdnative_handle") ("const char *" "p_name")
      ("const godot_signal *" "p_signal")))
    ((:NAME . "godot_nativescript_get_userdata") (:RETURN--TYPE . "void *")
     (:ARGUMENTS ("godot_object *" "p_instance")))))
  ((:NAME . "pluginscript") (:TYPE . "PLUGINSCRIPT")
   (:VERSION (:MAJOR . 1) (:MINOR . 0)) (:NEXT)
   (:API
    ((:NAME . "godot_pluginscript_register_language") (:RETURN--TYPE . "void")
     (:ARGUMENTS
      ("const godot_pluginscript_language_desc *" "language_desc")))))
  ((:NAME . "android") (:TYPE . "ANDROID") (:VERSION (:MAJOR . 1) (:MINOR . 1))
   (:NEXT)
   (:API
    ((:NAME . "godot_android_get_env") (:RETURN--TYPE . "JNIEnv*")
     (:ARGUMENTS))
    ((:NAME . "godot_android_get_activity") (:RETURN--TYPE . "jobject")
     (:ARGUMENTS))
    ((:NAME . "godot_android_get_surface") (:RETURN--TYPE . "jobject")
     (:ARGUMENTS))
    ((:NAME . "godot_android_is_activity_resumed") (:RETURN--TYPE . "bool")
     (:ARGUMENTS))))
  ((:NAME . "arvr") (:TYPE . "ARVR") (:VERSION (:MAJOR . 1) (:MINOR . 1))
   (:NEXT)
   (:API
    ((:NAME . "godot_arvr_register_interface") (:RETURN--TYPE . "void")
     (:ARGUMENTS ("const godot_arvr_interface_gdnative *" "p_interface")))
    ((:NAME . "godot_arvr_get_worldscale") (:RETURN--TYPE . "godot_real")
     (:ARGUMENTS))
    ((:NAME . "godot_arvr_get_reference_frame")
     (:RETURN--TYPE . "godot_transform") (:ARGUMENTS))
    ((:NAME . "godot_arvr_blit") (:RETURN--TYPE . "void")
     (:ARGUMENTS ("int" "p_eye") ("godot_rid *" "p_render_target")
      ("godot_rect2 *" "p_screen_rect")))
    ((:NAME . "godot_arvr_get_texid") (:RETURN--TYPE . "godot_int")
     (:ARGUMENTS ("godot_rid *" "p_render_target")))
    ((:NAME . "godot_arvr_add_controller") (:RETURN--TYPE . "godot_int")
     (:ARGUMENTS ("char *" "p_device_name") ("godot_int" "p_hand")
      ("godot_bool" "p_tracks_orientation")
      ("godot_bool" "p_tracks_position")))
    ((:NAME . "godot_arvr_remove_controller") (:RETURN--TYPE . "void")
     (:ARGUMENTS ("godot_int" "p_controller_id")))
    ((:NAME . "godot_arvr_set_controller_transform") (:RETURN--TYPE . "void")
     (:ARGUMENTS ("godot_int" "p_controller_id")
      ("godot_transform *" "p_transform") ("godot_bool" "p_tracks_orientation")
      ("godot_bool" "p_tracks_position")))
    ((:NAME . "godot_arvr_set_controller_button") (:RETURN--TYPE . "void")
     (:ARGUMENTS ("godot_int" "p_controller_id") ("godot_int" "p_button")
      ("godot_bool" "p_is_pressed")))
    ((:NAME . "godot_arvr_set_controller_axis") (:RETURN--TYPE . "void")
     (:ARGUMENTS ("godot_int" "p_controller_id") ("godot_int" "p_exis")
      ("godot_real" "p_value") ("godot_bool" "p_can_be_negative")))
    ((:NAME . "godot_arvr_get_controller_rumble")
     (:RETURN--TYPE . "godot_real")
     (:ARGUMENTS ("godot_int" "p_controller_id")))))
  ((:NAME . "videodecoder") (:TYPE . "VIDEODECODER")
   (:VERSION (:MAJOR . 0) (:MINOR . 1)) (:NEXT)
   (:API
    ((:NAME . "godot_videodecoder_file_read") (:RETURN--TYPE . "godot_int")
     (:ARGUMENTS ("void *" "file_ptr") ("uint8_t *" "buf") ("int" "buf_size")))
    ((:NAME . "godot_videodecoder_file_seek") (:RETURN--TYPE . "int64_t")
     (:ARGUMENTS ("void *" "file_ptr") ("int64_t" "pos") ("int" "whence")))
    ((:NAME . "godot_videodecoder_register_decoder") (:RETURN--TYPE . "void")
     (:ARGUMENTS
      ("const godot_videodecoder_interface_gdnative *" "p_interface")))))
  ((:NAME . "net") (:TYPE . "NET") (:VERSION (:MAJOR . 3) (:MINOR . 1))
   (:NEXT (:TYPE . "NET") (:VERSION (:MAJOR . 3) (:MINOR . 2)) (:NEXT)
    (:API
     ((:NAME . "godot_net_set_webrtc_library") (:RETURN--TYPE . "godot_error")
      (:ARGUMENTS ("const godot_net_webrtc_library *" "p_library")))
     ((:NAME . "godot_net_bind_webrtc_peer_connection")
      (:RETURN--TYPE . "void")
      (:ARGUMENTS ("godot_object *" "p_obj")
       ("const godot_net_webrtc_peer_connection *" "p_interface")))
     ((:NAME . "godot_net_bind_webrtc_data_channel") (:RETURN--TYPE . "void")
      (:ARGUMENTS ("godot_object *" "p_obj")
       ("const godot_net_webrtc_data_channel *" "p_interface")))))
   (:API
    ((:NAME . "godot_net_bind_stream_peer") (:RETURN--TYPE . "void")
     (:ARGUMENTS ("godot_object *" "p_obj")
      ("const godot_net_stream_peer *" "p_interface")))
    ((:NAME . "godot_net_bind_packet_peer") (:RETURN--TYPE . "void")
     (:ARGUMENTS ("godot_object *" "p_obj")
      ("const godot_net_packet_peer *" "p_interface")))
    ((:NAME . "godot_net_bind_multiplayer_peer") (:RETURN--TYPE . "void")
     (:ARGUMENTS ("godot_object *" "p_obj")
      ("const godot_net_multiplayer_peer *" "p_interface"))))))) 